/*
 * ARTIK Cloud API
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0.0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using CLOUD.Artik.Client;
using CLOUD.Artik.Api;
using CLOUD.Artik.Model;

namespace CLOUD.Artik.Test
{
    /// <summary>
    ///  Class for testing MessagesApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class MessagesApiTests
    {
        private MessagesApi instance;
        private static readonly DateTime UnixEpoch =
          new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc);

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
          String deviceToken = "dc43d12e2b59495daf94631e6ddfe3e8";
          Configuration c1 = new Configuration (timeout: 10000, accessToken: deviceToken);
          instance = new MessagesApi(c1);
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of MessagesApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' MessagesApi
            //Assert.IsInstanceOfType(typeof(MessagesApi), instance, "instance is a MessagesApi");
        }

        public static long GetCurrentUnixTimestampMillis()
        {
            return (long) (DateTime.UtcNow - UnixEpoch).TotalMilliseconds;
        }


        /// <summary>
        /// Test GetAggregatesHistogram
        /// </summary>
        [Test]
        public void GetAggregatesHistogramTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? startDate = null;
            //long? endDate = null;
            //string sdid = null;
            //string field = null;
            //string interval = null;
            //var response = instance.GetAggregatesHistogram(startDate, endDate, sdid, field, interval);
            //Assert.IsInstanceOf<AggregatesHistogramResponse> (response, "response is AggregatesHistogramResponse");
        }

        /// <summary>
        /// Test GetFieldPresence
        /// </summary>
        [Test]
        public void GetFieldPresenceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? startDate = null;
            //long? endDate = null;
            //string interval = null;
            //string sdid = null;
            //string fieldPresence = null;
            //var response = instance.GetFieldPresence(startDate, endDate, interval, sdid, fieldPresence);
            //Assert.IsInstanceOf<FieldPresenceEnvelope> (response, "response is FieldPresenceEnvelope");
        }

        /// <summary>
        /// Test GetLastNormalizedMessages
        /// </summary>
        [Test]
        public void GetLastNormalizedMessagesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? count = null;
            //string sdids = null;
            //string fieldPresence = null;
            //var response = instance.GetLastNormalizedMessages(count, sdids, fieldPresence);
            //Assert.IsInstanceOf<NormalizedMessagesEnvelope> (response, "response is NormalizedMessagesEnvelope");
        }

        /// <summary>
        /// Test GetMessageAggregates
        /// </summary>
        [Test]
        public void GetMessageAggregatesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string sdid = null;
            //string field = null;
            //long? startDate = null;
            //long? endDate = null;
            //var response = instance.GetMessageAggregates(sdid, field, startDate, endDate);
            //Assert.IsInstanceOf<AggregatesResponse> (response, "response is AggregatesResponse");
        }

        /// <summary>
        /// Test GetMessageSnapshots
        /// </summary>
        [Test]
        public void GetMessageSnapshotsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string sdids = null;
            //bool? includeTimestamp = null;
            //var response = instance.GetMessageSnapshots(sdids, includeTimestamp);
            //Assert.IsInstanceOf<SnapshotResponses> (response, "response is SnapshotResponses");
        }

        /// <summary>
        /// Test GetNormalizedMessages
        /// </summary>
        [Test]
        public void GetNormalizedMessagesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string uid = null;
            //string sdid = null;
            //string mid = null;
            //string fieldPresence = null;
            //string filter = null;
            //string offset = null;
            //int? count = null;
            //long? startDate = null;
            //long? endDate = null;
            //string order = null;
            //var response = instance.GetNormalizedMessages(uid, sdid, mid, fieldPresence, filter, offset, count, startDate, endDate, order);
            //Assert.IsInstanceOf<NormalizedMessagesEnvelope> (response, "response is NormalizedMessagesEnvelope");
        }

        /// <summary>
        /// Test SendMessage
        /// </summary>
        [Test]
        public void SendMessageTest()
        {
          Dictionary<String, Object> data = new Dictionary<String, Object> {{ "steps", 5}};
          long milliseconds = GetCurrentUnixTimestampMillis();

          Message message = new Message (Sdid: "19da42ee01414722a6ad1224097c38d4", Type: "Message", Data: data, Ts: milliseconds);

          var response = instance.SendMessage(message);
          var messageId = response.Data.Mid;

          Assert.IsNotNull (messageId);

          var normalizedMessageEnvelope = instance.GetNormalizedMessages(mid: messageId);
          Assert.AreEqual(1, normalizedMessageEnvelope.Size);

          NormalizedMessage normalized = normalizedMessageEnvelope.Data[0];
          Assert.AreEqual (messageId, normalized.Mid);

          Object steps = normalized.Data["steps"];
          Assert.IsNotNull(steps);
          Assert.AreEqual(5, steps);
        }

    }

}
