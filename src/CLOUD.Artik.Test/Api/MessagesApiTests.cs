/*
 * ARTIK Cloud API
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0.0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using CLOUD.Artik.Client;
using CLOUD.Artik.Api;
using CLOUD.Artik.Model;
using System.Threading;
using Action = CLOUD.Artik.Model.Action;
using System;

namespace CLOUD.Artik.Test
{
    /// <summary>
    ///  Class for testing MessagesApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class MessagesApiTests : ArtikCloudApiTest
    {
        private MessagesApi instance;
        private static readonly DateTime UnixEpoch =
          new DateTime(1970, 1, 1, 0, 0, 0, DateTimeKind.Utc);

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            String deviceToken = Properties["device1.token"];
            Configuration config = new Configuration(timeout: 10000, accessToken: deviceToken);
            instance = new MessagesApi(config);
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {
            instance = null;
        }

        /// <summary>
        /// Test an instance of MessagesApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' MessagesApi
            //Assert.IsInstanceOfType(typeof(MessagesApi), instance, "instance is a MessagesApi");
        }

        public static long GetCurrentUnixTimestampMillis()
        {
            return (long)(System.DateTime.UtcNow - UnixEpoch).TotalMilliseconds;
        }


        /// <summary>
        /// Test GetAggregatesHistogram
        /// </summary>
        [Test]
        public void GetAggregatesHistogramTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? startDate = null;
            //long? endDate = null;
            //string sdid = null;
            //string field = null;
            //string interval = null;
            //var response = instance.GetAggregatesHistogram(startDate, endDate, sdid, field, interval);
            //Assert.IsInstanceOf<AggregatesHistogramResponse> (response, "response is AggregatesHistogramResponse");
        }

        /// <summary>
        /// Test GetFieldPresence
        /// </summary>
        [Test]
        public void GetFieldPresenceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? startDate = null;
            //long? endDate = null;
            //string interval = null;
            //string sdid = null;
            //string fieldPresence = null;
            //var response = instance.GetFieldPresence(startDate, endDate, interval, sdid, fieldPresence);
            //Assert.IsInstanceOf<FieldPresenceEnvelope> (response, "response is FieldPresenceEnvelope");
        }

        /// <summary>
        /// Test GetLastNormalizedMessages
        /// </summary>
        [Test]
        public void GetLastNormalizedMessagesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //int? count = null;
            //string sdids = null;
            //string fieldPresence = null;
            //var response = instance.GetLastNormalizedMessages(count, sdids, fieldPresence);
            //Assert.IsInstanceOf<NormalizedMessagesEnvelope> (response, "response is NormalizedMessagesEnvelope");
        }

        /// <summary>
        /// Test GetMessageAggregates
        /// </summary>
        [Test]
        public void GetMessageAggregatesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string sdid = null;
            //string field = null;
            //long? startDate = null;
            //long? endDate = null;
            //var response = instance.GetMessageAggregates(sdid, field, startDate, endDate);
            //Assert.IsInstanceOf<AggregatesResponse> (response, "response is AggregatesResponse");
        }

        /// <summary>
        /// Test GetMessageSnapshots
        /// </summary>
        [Test]
        public void GetMessageSnapshotsTest()
        {
            string sdids = Properties["device1.id"];

            SnapshotResponses env = instance.GetMessageSnapshots(sdids, false);

            Assert.AreEqual(sdids, env.Sdids, "SDIDs must match");

            Assert.AreEqual(sdids, env.Data[0].Sdid, "SDID must match");

            IDictionary<string, object> stepsInfo = (IDictionary<string, object>)env.Data[0].Data["steps"];

            Assert.AreEqual(500.0f, stepsInfo["value"], "Steps must be 500");
        }

        /// <summary>
        /// Test GetNormalizedMessages
        /// </summary>
        [Test]
        public void GetNormalizedMessagesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string uid = null;
            //string sdid = null;
            //string mid = null;
            //string fieldPresence = null;
            //string filter = null;
            //string offset = null;
            //int? count = null;
            //long? startDate = null;
            //long? endDate = null;
            //string order = null;
            //var response = instance.GetNormalizedMessages(uid, sdid, mid, fieldPresence, filter, offset, count, startDate, endDate, order);
            //Assert.IsInstanceOf<NormalizedMessagesEnvelope> (response, "response is NormalizedMessagesEnvelope");
        }

        /// <summary>
        /// Test SendMessage
        /// </summary>
        [Test]
        public void SendMessageTest()
        {
            Dictionary<string, object> data = new Dictionary<string, object> { { "steps", 500 } };
            long milliseconds = GetCurrentUnixTimestampMillis();
            string sdid = Properties["device1.id"];

            Message message = new Message(Sdid: sdid, Type: "Message", Data: data, Ts: milliseconds);

            var response = instance.SendMessage(message);
            var messageId = response.Data.Mid;

            Assert.IsNotNull(messageId);

            var normalizedMessageEnvelope = instance.GetNormalizedMessages(mid: messageId);
            Assert.AreEqual(1, normalizedMessageEnvelope.Size);

            NormalizedMessage normalized = normalizedMessageEnvelope.Data[0];
            Assert.AreEqual(messageId, normalized.Mid);

            object steps = normalized.Data["steps"];
            Assert.IsNotNull(steps);
            Assert.AreEqual(500, steps);
        }

        [Test]
        public void SendActionsTest()
        {
            string ddid = Properties["device4.id"];
            string deviceToken = Properties["device4.token"];
            Configuration config = new Configuration(timeout: 10000, accessToken: deviceToken);
            MessagesApi newApi = new MessagesApi(config);

            Action action = new Action();
            action.Name = "setVolume";
            action.Parameters = new Dictionary<string, object>();
            action.Parameters.Add("volume", 5);
            
            ActionArray actionArray = new ActionArray();
            actionArray.Actions = new List<Action>();
            actionArray.Actions.Add(action);

            Actions actions = new Actions();
            actions.Ddid = ddid;
            actions.Ts = GetCurrentUnixTimestampMillis();
            actions.Data = actionArray;

            string mid = newApi.SendActions(actions).Data.Mid;

            // Wait 2 seconds for the message to be normalized. 2 seconds just to be
            // safe, usually much faster.
            Thread.Sleep(2000);

            NormalizedActionsEnvelope envelope = newApi.GetNormalizedActions(null, null, mid, null, null, null, null, null);
            Assert.AreEqual(1, envelope.Size);

            NormalizedAction normalized = envelope.Data[0];
            Action actionRx = normalized.Data.Actions[0];

            Assert.AreEqual("setVolume", actionRx.Name);

            object volume = actionRx.Parameters["volume"];
            Assert.NotNull(volume, "Volume should not be null");
            Assert.AreEqual(5, volume);
        }

    }

}
