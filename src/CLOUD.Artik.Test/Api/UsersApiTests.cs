/*
 * ARTIK Cloud API
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0.0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using CLOUD.Artik.Client;
using CLOUD.Artik.Api;
using CLOUD.Artik.Model;

namespace CLOUD.Artik.Test
{
    /// <summary>
    ///  Class for testing UsersApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class UsersApiTests
    {
        private UsersApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
          // set timeout to 10 seconds
          Configuration c1 = new Configuration (timeout: 10000, accessToken: "12d094c0b6294f7f9bdbfcf0d2f6c64b");
          instance = new UsersApi(c1);
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of UsersApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' UsersApi
            //Assert.IsInstanceOfType(typeof(UsersApi), instance, "instance is a UsersApi");
        }


        /// <summary>
        /// Test CreateUserProperties
        /// </summary>
        [Test]
        public void CreateUserPropertiesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //AppProperties properties = null;
            //string aid = null;
            //var response = instance.CreateUserProperties(userId, properties, aid);
            //Assert.IsInstanceOf<PropertiesEnvelope> (response, "response is PropertiesEnvelope");
        }

        /// <summary>
        /// Test DeleteUserProperties
        /// </summary>
        [Test]
        public void DeleteUserPropertiesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //string aid = null;
            //var response = instance.DeleteUserProperties(userId, aid);
            //Assert.IsInstanceOf<PropertiesEnvelope> (response, "response is PropertiesEnvelope");
        }

        /// <summary>
        /// Test GetSelf
        /// </summary>
        [Test]
        public void GetSelfTest()
        {
          UserEnvelope response = instance.GetSelf ();

          Assert.AreEqual ("maneesh", response.Data.Name);
          Assert.AreEqual ("Maneesh Sahu", response.Data.FullName);
        }

        /// <summary>
        /// Test GetUserDeviceTypes
        /// </summary>
        [Test]
        public void GetUserDeviceTypesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //int? offset = null;
            //int? count = null;
            //bool? includeShared = null;
            //var response = instance.GetUserDeviceTypes(userId, offset, count, includeShared);
            //Assert.IsInstanceOf<DeviceTypesEnvelope> (response, "response is DeviceTypesEnvelope");
        }

        /// <summary>
        /// Test GetUserDevices
        /// </summary>
        [Test]
        public void GetUserDevicesTest()
        {
          DevicesEnvelope response = instance.GetUserDevices (userId: "04ddbd35d57d4d7b8f07f219c44457b2");

          Assert.IsTrue (response.Count > 5);
        }

        /// <summary>
        /// Test GetUserProperties
        /// </summary>
        [Test]
        public void GetUserPropertiesTest()
        {
          String aid = "b6951bf387b84f63b38911ae35d65e28";
          PropertiesEnvelope response = null;
          try
          {
            // Retrieve
            response = instance.GetUserProperties (userId: "04ddbd35d57d4d7b8f07f219c44457b2", aid: aid);
          }
          catch
          {
            // Create
            AppProperties appProperties = new AppProperties (Properties: "abc=def");
            response = instance.CreateUserProperties (userId: "04ddbd35d57d4d7b8f07f219c44457b2", properties: appProperties, aid: aid);
          }

          Assert.IsNotNull (response);

          // Update
          AppProperties appProperties2 = new AppProperties( Properties: "mno=pqr");
          PropertiesEnvelope response2 = instance.UpdateUserProperties (userId: "04ddbd35d57d4d7b8f07f219c44457b2", properties: appProperties2, aid: aid);

          Assert.IsNotNull (response2);
          Assert.AreEqual ("mno=pqr", response2.Data.Properties);

          // Delete
          PropertiesEnvelope response3 = instance.DeleteUserProperties (userId: "04ddbd35d57d4d7b8f07f219c44457b2", aid: aid);

          Assert.IsNotNull (response3);
          Assert.AreEqual(response2, response3);
        }

        /// <summary>
        /// Test GetUserRules
        /// </summary>
        [Test]
        public void GetUserRulesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //bool? excludeDisabled = null;
            //int? count = null;
            //int? offset = null;
            //var response = instance.GetUserRules(userId, excludeDisabled, count, offset);
            //Assert.IsInstanceOf<RulesEnvelope> (response, "response is RulesEnvelope");
        }

        /// <summary>
        /// Test UpdateUserProperties
        /// </summary>
        [Test]
        public void UpdateUserPropertiesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string userId = null;
            //AppProperties properties = null;
            //string aid = null;
            //var response = instance.UpdateUserProperties(userId, properties, aid);
            //Assert.IsInstanceOf<PropertiesEnvelope> (response, "response is PropertiesEnvelope");
        }

    }

}
