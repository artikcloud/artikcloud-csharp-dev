/*
 * ARTIK Cloud API
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0.0
 *
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using CLOUD.Artik.Api;
using CLOUD.Artik.Client;
using CLOUD.Artik.Model;
using NUnit.Framework;

namespace CLOUD.Artik.Test
{
    /// <summary>
    ///     Class for testing UsersApi
    /// </summary>
    /// <remarks>
    ///     This file is automatically generated by Swagger Codegen.
    ///     Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class UsersApiTests : ArtikCloudApiTest
    {
        private UsersApi instance;
        protected String userId;

        /// <summary>
        ///     Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            // set timeout to 10 seconds
            var userToken = Properties["user1.token"];
            var config = new Configuration(timeout: 10000, accessToken: userToken);
            instance = new UsersApi(config);

            userId = instance.GetSelf().Data.Id;
        }

        /// <summary>
        ///     Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {
            instance = null;
        }

        /// <summary>
        ///     Test GetSelf
        /// </summary>
        [Test]
        public void GetSelfTest()
        {
            var userEnvelope = instance.GetSelf();
            Assert.NotNull(userEnvelope);

            var user = userEnvelope.Data;
            Assert.NotNull(user);

            Assert.AreEqual(Properties["user1.email"], user.Email);
            Assert.AreEqual(Properties["user1.id"], user.Id);
            Assert.AreEqual(Properties["user1.name"], user.Name);
            Assert.AreEqual(Properties["user1.fullname"], user.FullName);
            Assert.AreEqual(Properties["user1.createdon"], user.CreatedOn.ToString());
            Assert.NotNull(user.ModifiedOn);
        }

        /// <summary>
        ///     Test GetUserDeviceTypes
        /// </summary>
        [Test]
        public void GetUserDeviceTypesTest()
        {
            var deviceTypesEnvelope = instance
                .GetUserDeviceTypes(userId, null, null, null);

            Assert.NotNull(deviceTypesEnvelope);

            Assert.NotNull(deviceTypesEnvelope.Data.DeviceTypes);
        }

        /// <summary>
        ///     Test GetUserDevices
        /// </summary>
        [Test]
        public void GetUserDevicesTest()
        {
            var userDevicesEnvelope = instance.GetUserDevices(
                userId, null, null, null);

            Assert.NotNull(userDevicesEnvelope);

            Assert.NotNull(userDevicesEnvelope.Data.Devices);

            Assert.IsTrue(userDevicesEnvelope.Count > 5);
        }

        /// <summary>
        ///     Test GetUserProperties
        /// </summary>
        [Test]
        public void UserPropertiesTest()
        {
            var aid = Properties["user1.aid"];
            PropertiesEnvelope userProperties = null;

            try
            {
                // Retrieve
                userProperties = instance.GetUserProperties(userId, aid);
            }
            catch (ApiException apiException)
            {
                if (apiException.ErrorCode == 404)
                {
                    // Create
                    var appProperties = new AppProperties(Properties: "abc=def");

                    userProperties = instance.CreateUserProperties(userId,
                        appProperties, aid);
                }
                else
                {
                    Assert.Fail("Non-404 Error returned by API");
                }
            }

            Assert.NotNull(userProperties);

            // Update
            var appProperties2 = new AppProperties(Properties: "mno=pqr");

            var userProperties2 = instance
                .UpdateUserProperties(userId, appProperties2, aid);
            Assert.NotNull(userProperties2);
            Assert.AreEqual("mno=pqr", userProperties2
                .Data.Properties, "Properties must be the same");

            // Delete
            var userProperties3 = instance
                .DeleteUserProperties(userId, aid);
            Assert.NotNull(userProperties3);
            Assert.AreEqual(userProperties2, userProperties3);
        }

        /// <summary>
        ///     Test GetUserRules
        /// </summary>
        [Test]
        public void GetUserRulesTest()
        {
            var rulesEnvelope = instance.GetUserRules(userId, false, null, null);

            Assert.NotNull(rulesEnvelope);

            Assert.NotNull(rulesEnvelope.Data);
        }
    }
}