/* 
 * ARTIK Cloud API
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using CLOUD.Artik.Client;
using CLOUD.Artik.Api;
using CLOUD.Artik.Model;

namespace CLOUD.Artik.Test
{
    /// <summary>
    ///  Class for testing DevicesApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class DevicesApiTests : ArtikCloudApiTest
    {
        private DevicesApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            string deviceToken = Properties["device1.token"];
            Configuration config = new Configuration(timeout: 10000, accessToken: deviceToken);
            instance = new DevicesApi(config);
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {
            instance = null;
        }

        /// <summary>
        /// Test an instance of DevicesApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' DevicesApi
            //Assert.IsInstanceOfType(typeof(DevicesApi), instance, "instance is a DevicesApi");
        }

        
        /// <summary>
        /// Test AddDevice
        /// </summary>
        [Test]
        public void AddDeviceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Device device = null;
            //var response = instance.AddDevice(device);
            //Assert.IsInstanceOf<DeviceEnvelope> (response, "response is DeviceEnvelope");
        }
        
        /// <summary>
        /// Test DeleteDevice
        /// </summary>
        [Test]
        public void DeleteDeviceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string deviceId = null;
            //var response = instance.DeleteDevice(deviceId);
            //Assert.IsInstanceOf<DeviceEnvelope> (response, "response is DeviceEnvelope");
        }
        
        /// <summary>
        /// Test DeleteDeviceToken
        /// </summary>
        [Test]
        public void DeleteDeviceTokenTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string deviceId = null;
            //var response = instance.DeleteDeviceToken(deviceId);
            //Assert.IsInstanceOf<DeviceTokenEnvelope> (response, "response is DeviceTokenEnvelope");
        }
        
        /// <summary>
        /// Test GetDevice
        /// </summary>
        [Test]
        public void GetDeviceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string deviceId = null;
            //var response = instance.GetDevice(deviceId);
            //Assert.IsInstanceOf<DeviceEnvelope> (response, "response is DeviceEnvelope");
        }
        
        /// <summary>
        /// Test GetDevicePresence
        /// </summary>
        [Test]
        public void GetDevicePresenceTest()
        {
            string deviceId = Properties["device1.id"];
            PresenceEnvelope response = instance.GetDevicePresence(deviceId);

            Assert.AreEqual(deviceId, response.Sdid, "Sdids must match");
            Assert.NotNull(response.Data.LastSeenOn, "lastSeenOn");
            Assert.NotNull(response.Data.Connected, "connected");
        }
        
        /// <summary>
        /// Test GetDeviceToken
        /// </summary>
        [Test]
        public void GetDeviceTokenTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string deviceId = null;
            //var response = instance.GetDeviceToken(deviceId);
            //Assert.IsInstanceOf<DeviceTokenEnvelope> (response, "response is DeviceTokenEnvelope");
        }
        
        /// <summary>
        /// Test UpdateDevice
        /// </summary>
        [Test]
        public void UpdateDeviceTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string deviceId = null;
            //Device device = null;
            //var response = instance.UpdateDevice(deviceId, device);
            //Assert.IsInstanceOf<DeviceEnvelope> (response, "response is DeviceEnvelope");
        }
        
        /// <summary>
        /// Test UpdateDeviceToken
        /// </summary>
        [Test]
        public void UpdateDeviceTokenTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string deviceId = null;
            //var response = instance.UpdateDeviceToken(deviceId);
            //Assert.IsInstanceOf<DeviceTokenEnvelope> (response, "response is DeviceTokenEnvelope");
        }
        
    }

}
