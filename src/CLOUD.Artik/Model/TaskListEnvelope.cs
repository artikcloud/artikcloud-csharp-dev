/* 
 * ARTIK Cloud API
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace CLOUD.Artik.Model
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class TaskListEnvelope :  IEquatable<TaskListEnvelope>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TaskListEnvelope" /> class.
        /// </summary>
        /// <param name="Total">Total.</param>
        /// <param name="Data">Envelope for task list.</param>
        /// <param name="StatusCounts">Status counts.</param>
        /// <param name="Offset">Offset.</param>
        /// <param name="Count">Count.</param>
        public TaskListEnvelope(int? Total = null, TaskList Data = null, TasksStatusCounts StatusCounts = null, int? Offset = null, int? Count = null)
        {
            this.Total = Total;
            this.Data = Data;
            this.StatusCounts = StatusCounts;
            this.Offset = Offset;
            this.Count = Count;
        }
        
        /// <summary>
        /// Total
        /// </summary>
        /// <value>Total</value>
        [DataMember(Name="total", EmitDefaultValue=false)]
        public int? Total { get; set; }
        /// <summary>
        /// Envelope for task list
        /// </summary>
        /// <value>Envelope for task list</value>
        [DataMember(Name="data", EmitDefaultValue=false)]
        public TaskList Data { get; set; }
        /// <summary>
        /// Status counts
        /// </summary>
        /// <value>Status counts</value>
        [DataMember(Name="statusCounts", EmitDefaultValue=false)]
        public TasksStatusCounts StatusCounts { get; set; }
        /// <summary>
        /// Offset
        /// </summary>
        /// <value>Offset</value>
        [DataMember(Name="offset", EmitDefaultValue=false)]
        public int? Offset { get; set; }
        /// <summary>
        /// Count
        /// </summary>
        /// <value>Count</value>
        [DataMember(Name="count", EmitDefaultValue=false)]
        public int? Count { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TaskListEnvelope {\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("  StatusCounts: ").Append(StatusCounts).Append("\n");
            sb.Append("  Offset: ").Append(Offset).Append("\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as TaskListEnvelope);
        }

        /// <summary>
        /// Returns true if TaskListEnvelope instances are equal
        /// </summary>
        /// <param name="other">Instance of TaskListEnvelope to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TaskListEnvelope other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Total == other.Total ||
                    this.Total != null &&
                    this.Total.Equals(other.Total)
                ) && 
                (
                    this.Data == other.Data ||
                    this.Data != null &&
                    this.Data.Equals(other.Data)
                ) && 
                (
                    this.StatusCounts == other.StatusCounts ||
                    this.StatusCounts != null &&
                    this.StatusCounts.Equals(other.StatusCounts)
                ) && 
                (
                    this.Offset == other.Offset ||
                    this.Offset != null &&
                    this.Offset.Equals(other.Offset)
                ) && 
                (
                    this.Count == other.Count ||
                    this.Count != null &&
                    this.Count.Equals(other.Count)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Total != null)
                    hash = hash * 59 + this.Total.GetHashCode();
                if (this.Data != null)
                    hash = hash * 59 + this.Data.GetHashCode();
                if (this.StatusCounts != null)
                    hash = hash * 59 + this.StatusCounts.GetHashCode();
                if (this.Offset != null)
                    hash = hash * 59 + this.Offset.GetHashCode();
                if (this.Count != null)
                    hash = hash * 59 + this.Count.GetHashCode();
                return hash;
            }
        }
    }

}
