/* 
 * ARTIK Cloud API
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace CLOUD.Artik.Model
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class TaskHistory :  IEquatable<TaskHistory>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TaskHistory" /> class.
        /// </summary>
        /// <param name="NumAttempts">Number of attempts.</param>
        /// <param name="ErrorMessage">Error Message.</param>
        /// <param name="ErrorCode">Error Code.</param>
        /// <param name="Did">Device ID.</param>
        /// <param name="Status">Status.</param>
        /// <param name="Ts">Timestamp of most recent status change.</param>
        public TaskHistory(int? NumAttempts = null, string ErrorMessage = null, string ErrorCode = null, string Did = null, string Status = null, long? Ts = null)
        {
            this.NumAttempts = NumAttempts;
            this.ErrorMessage = ErrorMessage;
            this.ErrorCode = ErrorCode;
            this.Did = Did;
            this.Status = Status;
            this.Ts = Ts;
        }
        
        /// <summary>
        /// Number of attempts
        /// </summary>
        /// <value>Number of attempts</value>
        [DataMember(Name="numAttempts", EmitDefaultValue=false)]
        public int? NumAttempts { get; set; }
        /// <summary>
        /// Error Message
        /// </summary>
        /// <value>Error Message</value>
        [DataMember(Name="errorMessage", EmitDefaultValue=false)]
        public string ErrorMessage { get; set; }
        /// <summary>
        /// Error Code
        /// </summary>
        /// <value>Error Code</value>
        [DataMember(Name="errorCode", EmitDefaultValue=false)]
        public string ErrorCode { get; set; }
        /// <summary>
        /// Device ID
        /// </summary>
        /// <value>Device ID</value>
        [DataMember(Name="did", EmitDefaultValue=false)]
        public string Did { get; set; }
        /// <summary>
        /// Status
        /// </summary>
        /// <value>Status</value>
        [DataMember(Name="status", EmitDefaultValue=false)]
        public string Status { get; set; }
        /// <summary>
        /// Timestamp of most recent status change
        /// </summary>
        /// <value>Timestamp of most recent status change</value>
        [DataMember(Name="ts", EmitDefaultValue=false)]
        public long? Ts { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TaskHistory {\n");
            sb.Append("  NumAttempts: ").Append(NumAttempts).Append("\n");
            sb.Append("  ErrorMessage: ").Append(ErrorMessage).Append("\n");
            sb.Append("  ErrorCode: ").Append(ErrorCode).Append("\n");
            sb.Append("  Did: ").Append(Did).Append("\n");
            sb.Append("  Status: ").Append(Status).Append("\n");
            sb.Append("  Ts: ").Append(Ts).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as TaskHistory);
        }

        /// <summary>
        /// Returns true if TaskHistory instances are equal
        /// </summary>
        /// <param name="other">Instance of TaskHistory to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TaskHistory other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.NumAttempts == other.NumAttempts ||
                    this.NumAttempts != null &&
                    this.NumAttempts.Equals(other.NumAttempts)
                ) && 
                (
                    this.ErrorMessage == other.ErrorMessage ||
                    this.ErrorMessage != null &&
                    this.ErrorMessage.Equals(other.ErrorMessage)
                ) && 
                (
                    this.ErrorCode == other.ErrorCode ||
                    this.ErrorCode != null &&
                    this.ErrorCode.Equals(other.ErrorCode)
                ) && 
                (
                    this.Did == other.Did ||
                    this.Did != null &&
                    this.Did.Equals(other.Did)
                ) && 
                (
                    this.Status == other.Status ||
                    this.Status != null &&
                    this.Status.Equals(other.Status)
                ) && 
                (
                    this.Ts == other.Ts ||
                    this.Ts != null &&
                    this.Ts.Equals(other.Ts)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.NumAttempts != null)
                    hash = hash * 59 + this.NumAttempts.GetHashCode();
                if (this.ErrorMessage != null)
                    hash = hash * 59 + this.ErrorMessage.GetHashCode();
                if (this.ErrorCode != null)
                    hash = hash * 59 + this.ErrorCode.GetHashCode();
                if (this.Did != null)
                    hash = hash * 59 + this.Did.GetHashCode();
                if (this.Status != null)
                    hash = hash * 59 + this.Status.GetHashCode();
                if (this.Ts != null)
                    hash = hash * 59 + this.Ts.GetHashCode();
                return hash;
            }
        }
    }

}
