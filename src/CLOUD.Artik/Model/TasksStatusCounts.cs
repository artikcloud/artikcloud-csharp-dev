/* 
 * ARTIK Cloud API
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace CLOUD.Artik.Model
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class TasksStatusCounts :  IEquatable<TasksStatusCounts>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TasksStatusCounts" /> class.
        /// </summary>
        /// <param name="CANCELLED">Cancelled.</param>
        /// <param name="COMPLETE">Complete.</param>
        /// <param name="PROCESSING">Processing.</param>
        /// <param name="REQUESTED">Requested.</param>
        public TasksStatusCounts(int? CANCELLED = null, int? COMPLETE = null, int? PROCESSING = null, int? REQUESTED = null)
        {
            this.CANCELLED = CANCELLED;
            this.COMPLETE = COMPLETE;
            this.PROCESSING = PROCESSING;
            this.REQUESTED = REQUESTED;
        }
        
        /// <summary>
        /// Cancelled
        /// </summary>
        /// <value>Cancelled</value>
        [DataMember(Name="CANCELLED", EmitDefaultValue=false)]
        public int? CANCELLED { get; set; }
        /// <summary>
        /// Complete
        /// </summary>
        /// <value>Complete</value>
        [DataMember(Name="COMPLETE", EmitDefaultValue=false)]
        public int? COMPLETE { get; set; }
        /// <summary>
        /// Processing
        /// </summary>
        /// <value>Processing</value>
        [DataMember(Name="PROCESSING", EmitDefaultValue=false)]
        public int? PROCESSING { get; set; }
        /// <summary>
        /// Requested
        /// </summary>
        /// <value>Requested</value>
        [DataMember(Name="REQUESTED", EmitDefaultValue=false)]
        public int? REQUESTED { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TasksStatusCounts {\n");
            sb.Append("  CANCELLED: ").Append(CANCELLED).Append("\n");
            sb.Append("  COMPLETE: ").Append(COMPLETE).Append("\n");
            sb.Append("  PROCESSING: ").Append(PROCESSING).Append("\n");
            sb.Append("  REQUESTED: ").Append(REQUESTED).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as TasksStatusCounts);
        }

        /// <summary>
        /// Returns true if TasksStatusCounts instances are equal
        /// </summary>
        /// <param name="other">Instance of TasksStatusCounts to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TasksStatusCounts other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.CANCELLED == other.CANCELLED ||
                    this.CANCELLED != null &&
                    this.CANCELLED.Equals(other.CANCELLED)
                ) && 
                (
                    this.COMPLETE == other.COMPLETE ||
                    this.COMPLETE != null &&
                    this.COMPLETE.Equals(other.COMPLETE)
                ) && 
                (
                    this.PROCESSING == other.PROCESSING ||
                    this.PROCESSING != null &&
                    this.PROCESSING.Equals(other.PROCESSING)
                ) && 
                (
                    this.REQUESTED == other.REQUESTED ||
                    this.REQUESTED != null &&
                    this.REQUESTED.Equals(other.REQUESTED)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.CANCELLED != null)
                    hash = hash * 59 + this.CANCELLED.GetHashCode();
                if (this.COMPLETE != null)
                    hash = hash * 59 + this.COMPLETE.GetHashCode();
                if (this.PROCESSING != null)
                    hash = hash * 59 + this.PROCESSING.GetHashCode();
                if (this.REQUESTED != null)
                    hash = hash * 59 + this.REQUESTED.GetHashCode();
                return hash;
            }
        }
    }

}
