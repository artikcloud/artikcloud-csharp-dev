/* 
 * ARTIK Cloud API
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace CLOUD.Artik.Model
{
    /// <summary>
    /// Normalized Action
    /// </summary>
    [DataContract]
    public partial class NormalizedAction :  IEquatable<NormalizedAction>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="NormalizedAction" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected NormalizedAction() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="NormalizedAction" /> class.
        /// </summary>
        /// <param name="Cts">Cts (required).</param>
        /// <param name="Ts">Ts (required).</param>
        /// <param name="Mid">Mid (required).</param>
        /// <param name="Sdid">Sdid.</param>
        /// <param name="Ddid">Ddid (required).</param>
        /// <param name="Ddtid">Ddtid (required).</param>
        /// <param name="Uid">Uid (required).</param>
        /// <param name="Mv">Mv (required).</param>
        /// <param name="Data">Data (required).</param>
        public NormalizedAction(long? Cts = null, long? Ts = null, string Mid = null, string Sdid = null, string Ddid = null, string Ddtid = null, string Uid = null, int? Mv = null, ActionArray Data = null)
        {
            // to ensure "Cts" is required (not null)
            if (Cts == null)
            {
                throw new InvalidDataException("Cts is a required property for NormalizedAction and cannot be null");
            }
            else
            {
                this.Cts = Cts;
            }
            // to ensure "Ts" is required (not null)
            if (Ts == null)
            {
                throw new InvalidDataException("Ts is a required property for NormalizedAction and cannot be null");
            }
            else
            {
                this.Ts = Ts;
            }
            // to ensure "Mid" is required (not null)
            if (Mid == null)
            {
                throw new InvalidDataException("Mid is a required property for NormalizedAction and cannot be null");
            }
            else
            {
                this.Mid = Mid;
            }
            // to ensure "Ddid" is required (not null)
            if (Ddid == null)
            {
                throw new InvalidDataException("Ddid is a required property for NormalizedAction and cannot be null");
            }
            else
            {
                this.Ddid = Ddid;
            }
            // to ensure "Ddtid" is required (not null)
            if (Ddtid == null)
            {
                throw new InvalidDataException("Ddtid is a required property for NormalizedAction and cannot be null");
            }
            else
            {
                this.Ddtid = Ddtid;
            }
            // to ensure "Uid" is required (not null)
            if (Uid == null)
            {
                throw new InvalidDataException("Uid is a required property for NormalizedAction and cannot be null");
            }
            else
            {
                this.Uid = Uid;
            }
            // to ensure "Mv" is required (not null)
            if (Mv == null)
            {
                throw new InvalidDataException("Mv is a required property for NormalizedAction and cannot be null");
            }
            else
            {
                this.Mv = Mv;
            }
            // to ensure "Data" is required (not null)
            if (Data == null)
            {
                throw new InvalidDataException("Data is a required property for NormalizedAction and cannot be null");
            }
            else
            {
                this.Data = Data;
            }
            this.Sdid = Sdid;
        }
        
        /// <summary>
        /// Gets or Sets Cts
        /// </summary>
        [DataMember(Name="cts", EmitDefaultValue=false)]
        public long? Cts { get; set; }
        /// <summary>
        /// Gets or Sets Ts
        /// </summary>
        [DataMember(Name="ts", EmitDefaultValue=false)]
        public long? Ts { get; set; }
        /// <summary>
        /// Gets or Sets Mid
        /// </summary>
        [DataMember(Name="mid", EmitDefaultValue=false)]
        public string Mid { get; set; }
        /// <summary>
        /// Gets or Sets Sdid
        /// </summary>
        [DataMember(Name="sdid", EmitDefaultValue=false)]
        public string Sdid { get; set; }
        /// <summary>
        /// Gets or Sets Ddid
        /// </summary>
        [DataMember(Name="ddid", EmitDefaultValue=false)]
        public string Ddid { get; set; }
        /// <summary>
        /// Gets or Sets Ddtid
        /// </summary>
        [DataMember(Name="ddtid", EmitDefaultValue=false)]
        public string Ddtid { get; set; }
        /// <summary>
        /// Gets or Sets Uid
        /// </summary>
        [DataMember(Name="uid", EmitDefaultValue=false)]
        public string Uid { get; set; }
        /// <summary>
        /// Gets or Sets Mv
        /// </summary>
        [DataMember(Name="mv", EmitDefaultValue=false)]
        public int? Mv { get; set; }
        /// <summary>
        /// Gets or Sets Data
        /// </summary>
        [DataMember(Name="data", EmitDefaultValue=false)]
        public ActionArray Data { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class NormalizedAction {\n");
            sb.Append("  Cts: ").Append(Cts).Append("\n");
            sb.Append("  Ts: ").Append(Ts).Append("\n");
            sb.Append("  Mid: ").Append(Mid).Append("\n");
            sb.Append("  Sdid: ").Append(Sdid).Append("\n");
            sb.Append("  Ddid: ").Append(Ddid).Append("\n");
            sb.Append("  Ddtid: ").Append(Ddtid).Append("\n");
            sb.Append("  Uid: ").Append(Uid).Append("\n");
            sb.Append("  Mv: ").Append(Mv).Append("\n");
            sb.Append("  Data: ").Append(Data).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as NormalizedAction);
        }

        /// <summary>
        /// Returns true if NormalizedAction instances are equal
        /// </summary>
        /// <param name="other">Instance of NormalizedAction to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(NormalizedAction other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Cts == other.Cts ||
                    this.Cts != null &&
                    this.Cts.Equals(other.Cts)
                ) && 
                (
                    this.Ts == other.Ts ||
                    this.Ts != null &&
                    this.Ts.Equals(other.Ts)
                ) && 
                (
                    this.Mid == other.Mid ||
                    this.Mid != null &&
                    this.Mid.Equals(other.Mid)
                ) && 
                (
                    this.Sdid == other.Sdid ||
                    this.Sdid != null &&
                    this.Sdid.Equals(other.Sdid)
                ) && 
                (
                    this.Ddid == other.Ddid ||
                    this.Ddid != null &&
                    this.Ddid.Equals(other.Ddid)
                ) && 
                (
                    this.Ddtid == other.Ddtid ||
                    this.Ddtid != null &&
                    this.Ddtid.Equals(other.Ddtid)
                ) && 
                (
                    this.Uid == other.Uid ||
                    this.Uid != null &&
                    this.Uid.Equals(other.Uid)
                ) && 
                (
                    this.Mv == other.Mv ||
                    this.Mv != null &&
                    this.Mv.Equals(other.Mv)
                ) && 
                (
                    this.Data == other.Data ||
                    this.Data != null &&
                    this.Data.Equals(other.Data)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Cts != null)
                    hash = hash * 59 + this.Cts.GetHashCode();
                if (this.Ts != null)
                    hash = hash * 59 + this.Ts.GetHashCode();
                if (this.Mid != null)
                    hash = hash * 59 + this.Mid.GetHashCode();
                if (this.Sdid != null)
                    hash = hash * 59 + this.Sdid.GetHashCode();
                if (this.Ddid != null)
                    hash = hash * 59 + this.Ddid.GetHashCode();
                if (this.Ddtid != null)
                    hash = hash * 59 + this.Ddtid.GetHashCode();
                if (this.Uid != null)
                    hash = hash * 59 + this.Uid.GetHashCode();
                if (this.Mv != null)
                    hash = hash * 59 + this.Mv.GetHashCode();
                if (this.Data != null)
                    hash = hash * 59 + this.Data.GetHashCode();
                return hash;
            }
        }
    }

}
