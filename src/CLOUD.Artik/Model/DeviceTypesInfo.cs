/* 
 * ARTIK Cloud API
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace CLOUD.Artik.Model
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class DeviceTypesInfo :  IEquatable<DeviceTypesInfo>
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DeviceTypesInfo" /> class.
        /// </summary>
        /// <param name="DevicePropertiesEnabled">Device Properties Enabled.</param>
        /// <param name="Pmax">Pmax value.</param>
        /// <param name="ModifiedOn">Modified on.</param>
        /// <param name="Dtid">Device Type ID.</param>
        /// <param name="Pmin">Pmin value.</param>
        /// <param name="TaskExpiresAfter">Default task expiration time in seconds.</param>
        /// <param name="CreatedOn">Created on.</param>
        public DeviceTypesInfo(bool? DevicePropertiesEnabled = null, int? Pmax = null, long? ModifiedOn = null, string Dtid = null, int? Pmin = null, int? TaskExpiresAfter = null, long? CreatedOn = null)
        {
            this.DevicePropertiesEnabled = DevicePropertiesEnabled;
            this.Pmax = Pmax;
            this.ModifiedOn = ModifiedOn;
            this.Dtid = Dtid;
            this.Pmin = Pmin;
            this.TaskExpiresAfter = TaskExpiresAfter;
            this.CreatedOn = CreatedOn;
        }
        
        /// <summary>
        /// Device Properties Enabled
        /// </summary>
        /// <value>Device Properties Enabled</value>
        [DataMember(Name="devicePropertiesEnabled", EmitDefaultValue=false)]
        public bool? DevicePropertiesEnabled { get; set; }
        /// <summary>
        /// Pmax value
        /// </summary>
        /// <value>Pmax value</value>
        [DataMember(Name="pmax", EmitDefaultValue=false)]
        public int? Pmax { get; set; }
        /// <summary>
        /// Modified on
        /// </summary>
        /// <value>Modified on</value>
        [DataMember(Name="modifiedOn", EmitDefaultValue=false)]
        public long? ModifiedOn { get; set; }
        /// <summary>
        /// Device Type ID
        /// </summary>
        /// <value>Device Type ID</value>
        [DataMember(Name="dtid", EmitDefaultValue=false)]
        public string Dtid { get; set; }
        /// <summary>
        /// Pmin value
        /// </summary>
        /// <value>Pmin value</value>
        [DataMember(Name="pmin", EmitDefaultValue=false)]
        public int? Pmin { get; set; }
        /// <summary>
        /// Default task expiration time in seconds
        /// </summary>
        /// <value>Default task expiration time in seconds</value>
        [DataMember(Name="taskExpiresAfter", EmitDefaultValue=false)]
        public int? TaskExpiresAfter { get; set; }
        /// <summary>
        /// Created on
        /// </summary>
        /// <value>Created on</value>
        [DataMember(Name="createdOn", EmitDefaultValue=false)]
        public long? CreatedOn { get; set; }
        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DeviceTypesInfo {\n");
            sb.Append("  DevicePropertiesEnabled: ").Append(DevicePropertiesEnabled).Append("\n");
            sb.Append("  Pmax: ").Append(Pmax).Append("\n");
            sb.Append("  ModifiedOn: ").Append(ModifiedOn).Append("\n");
            sb.Append("  Dtid: ").Append(Dtid).Append("\n");
            sb.Append("  Pmin: ").Append(Pmin).Append("\n");
            sb.Append("  TaskExpiresAfter: ").Append(TaskExpiresAfter).Append("\n");
            sb.Append("  CreatedOn: ").Append(CreatedOn).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as DeviceTypesInfo);
        }

        /// <summary>
        /// Returns true if DeviceTypesInfo instances are equal
        /// </summary>
        /// <param name="other">Instance of DeviceTypesInfo to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DeviceTypesInfo other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.DevicePropertiesEnabled == other.DevicePropertiesEnabled ||
                    this.DevicePropertiesEnabled != null &&
                    this.DevicePropertiesEnabled.Equals(other.DevicePropertiesEnabled)
                ) && 
                (
                    this.Pmax == other.Pmax ||
                    this.Pmax != null &&
                    this.Pmax.Equals(other.Pmax)
                ) && 
                (
                    this.ModifiedOn == other.ModifiedOn ||
                    this.ModifiedOn != null &&
                    this.ModifiedOn.Equals(other.ModifiedOn)
                ) && 
                (
                    this.Dtid == other.Dtid ||
                    this.Dtid != null &&
                    this.Dtid.Equals(other.Dtid)
                ) && 
                (
                    this.Pmin == other.Pmin ||
                    this.Pmin != null &&
                    this.Pmin.Equals(other.Pmin)
                ) && 
                (
                    this.TaskExpiresAfter == other.TaskExpiresAfter ||
                    this.TaskExpiresAfter != null &&
                    this.TaskExpiresAfter.Equals(other.TaskExpiresAfter)
                ) && 
                (
                    this.CreatedOn == other.CreatedOn ||
                    this.CreatedOn != null &&
                    this.CreatedOn.Equals(other.CreatedOn)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.DevicePropertiesEnabled != null)
                    hash = hash * 59 + this.DevicePropertiesEnabled.GetHashCode();
                if (this.Pmax != null)
                    hash = hash * 59 + this.Pmax.GetHashCode();
                if (this.ModifiedOn != null)
                    hash = hash * 59 + this.ModifiedOn.GetHashCode();
                if (this.Dtid != null)
                    hash = hash * 59 + this.Dtid.GetHashCode();
                if (this.Pmin != null)
                    hash = hash * 59 + this.Pmin.GetHashCode();
                if (this.TaskExpiresAfter != null)
                    hash = hash * 59 + this.TaskExpiresAfter.GetHashCode();
                if (this.CreatedOn != null)
                    hash = hash * 59 + this.CreatedOn.GetHashCode();
                return hash;
            }
        }
    }

}
