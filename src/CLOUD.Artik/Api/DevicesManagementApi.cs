/* 
 * ARTIK Cloud API
 *
 * No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 2.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using CLOUD.Artik.Client;
using CLOUD.Artik.Model;

namespace CLOUD.Artik.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDevicesManagementApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a new task for one or more devices
        /// </summary>
        /// <remarks>
        /// Create a new task for one or more devices
        /// </remarks>
        /// <exception cref="CLOUD.Artik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskPayload">Task object to be created</param>
        /// <returns>TaskEnvelope</returns>
        TaskEnvelope CreateTasks (TaskRequest taskPayload);

        /// <summary>
        /// Create a new task for one or more devices
        /// </summary>
        /// <remarks>
        /// Create a new task for one or more devices
        /// </remarks>
        /// <exception cref="CLOUD.Artik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskPayload">Task object to be created</param>
        /// <returns>ApiResponse of TaskEnvelope</returns>
        ApiResponse<TaskEnvelope> CreateTasksWithHttpInfo (TaskRequest taskPayload);
        /// <summary>
        /// Deletes a device&#39;s properties.
        /// </summary>
        /// <remarks>
        /// Deletes a device&#39;s properties.
        /// </remarks>
        /// <exception cref="CLOUD.Artik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did">Device ID.</param>
        /// <returns>MetadataEnvelope</returns>
        MetadataEnvelope DeleteServerProperties (string did);

        /// <summary>
        /// Deletes a device&#39;s properties.
        /// </summary>
        /// <remarks>
        /// Deletes a device&#39;s properties.
        /// </remarks>
        /// <exception cref="CLOUD.Artik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did">Device ID.</param>
        /// <returns>ApiResponse of MetadataEnvelope</returns>
        ApiResponse<MetadataEnvelope> DeleteServerPropertiesWithHttpInfo (string did);
        /// <summary>
        /// Returns the list of tasks for a particular device id with optional status filter.
        /// </summary>
        /// <remarks>
        /// Returns the list of tasks for a particular device id with optional status filter.
        /// </remarks>
        /// <exception cref="CLOUD.Artik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did">Device ID.</param>
        /// <param name="count">Max results count. (optional)</param>
        /// <param name="offset">Result starting offset. (optional)</param>
        /// <param name="status">Status filter. Comma-separated statuses. (optional)</param>
        /// <param name="order">Sort results by a field. Valid fields: createdOn. (optional)</param>
        /// <param name="sort">Sort order. Valid values: asc or desc. (optional)</param>
        /// <returns>TaskByDidListEnvelope</returns>
        TaskByDidListEnvelope GetAllByDid (string did, int? count = null, int? offset = null, string status = null, string order = null, string sort = null);

        /// <summary>
        /// Returns the list of tasks for a particular device id with optional status filter.
        /// </summary>
        /// <remarks>
        /// Returns the list of tasks for a particular device id with optional status filter.
        /// </remarks>
        /// <exception cref="CLOUD.Artik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did">Device ID.</param>
        /// <param name="count">Max results count. (optional)</param>
        /// <param name="offset">Result starting offset. (optional)</param>
        /// <param name="status">Status filter. Comma-separated statuses. (optional)</param>
        /// <param name="order">Sort results by a field. Valid fields: createdOn. (optional)</param>
        /// <param name="sort">Sort order. Valid values: asc or desc. (optional)</param>
        /// <returns>ApiResponse of TaskByDidListEnvelope</returns>
        ApiResponse<TaskByDidListEnvelope> GetAllByDidWithHttpInfo (string did, int? count = null, int? offset = null, string status = null, string order = null, string sort = null);
        /// <summary>
        /// Read a device type device management information.
        /// </summary>
        /// <remarks>
        /// Read a device type device management information.
        /// </remarks>
        /// <exception cref="CLOUD.Artik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dtid">Device type ID.</param>
        /// <returns>DeviceTypesInfoEnvelope</returns>
        DeviceTypesInfoEnvelope GetDeviceTypesInfo (string dtid);

        /// <summary>
        /// Read a device type device management information.
        /// </summary>
        /// <remarks>
        /// Read a device type device management information.
        /// </remarks>
        /// <exception cref="CLOUD.Artik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dtid">Device type ID.</param>
        /// <returns>ApiResponse of DeviceTypesInfoEnvelope</returns>
        ApiResponse<DeviceTypesInfoEnvelope> GetDeviceTypesInfoWithHttpInfo (string dtid);
        /// <summary>
        /// Get a device type&#39;s device management manifest properties
        /// </summary>
        /// <remarks>
        /// Get a device type&#39;s device management manifest properties
        /// </remarks>
        /// <exception cref="CLOUD.Artik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dtid">Device Type ID.</param>
        /// <returns>MetadataPropertiesEnvelope</returns>
        MetadataPropertiesEnvelope GetManifestProperties (string dtid);

        /// <summary>
        /// Get a device type&#39;s device management manifest properties
        /// </summary>
        /// <remarks>
        /// Get a device type&#39;s device management manifest properties
        /// </remarks>
        /// <exception cref="CLOUD.Artik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dtid">Device Type ID.</param>
        /// <returns>ApiResponse of MetadataPropertiesEnvelope</returns>
        ApiResponse<MetadataPropertiesEnvelope> GetManifestPropertiesWithHttpInfo (string dtid);
        /// <summary>
        /// Read a device&#39;s properties.
        /// </summary>
        /// <remarks>
        /// Read a device&#39;s properties.
        /// </remarks>
        /// <exception cref="CLOUD.Artik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did">Device ID.</param>
        /// <param name="includeTimestamp">Include timestamp. (optional)</param>
        /// <returns>MetadataEnvelope</returns>
        MetadataEnvelope GetProperties (string did, bool? includeTimestamp = null);

        /// <summary>
        /// Read a device&#39;s properties.
        /// </summary>
        /// <remarks>
        /// Read a device&#39;s properties.
        /// </remarks>
        /// <exception cref="CLOUD.Artik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did">Device ID.</param>
        /// <param name="includeTimestamp">Include timestamp. (optional)</param>
        /// <returns>ApiResponse of MetadataEnvelope</returns>
        ApiResponse<MetadataEnvelope> GetPropertiesWithHttpInfo (string did, bool? includeTimestamp = null);
        /// <summary>
        /// Returns the details and status of a task id and the individual statuses of each device id in the list.
        /// </summary>
        /// <remarks>
        /// Returns the details and status of a task id and the individual statuses of each device id in the list.
        /// </remarks>
        /// <exception cref="CLOUD.Artik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tid">Task ID.</param>
        /// <param name="count">Max results count. (optional)</param>
        /// <param name="offset">Result starting offset. (optional)</param>
        /// <param name="status">Status filter. Comma-separated statuses. (optional)</param>
        /// <param name="dids">Devices filter. Comma-separated device IDs. (optional)</param>
        /// <returns>TaskStatusesEnvelope</returns>
        TaskStatusesEnvelope GetStatuses (string tid, int? count = null, int? offset = null, string status = null, string dids = null);

        /// <summary>
        /// Returns the details and status of a task id and the individual statuses of each device id in the list.
        /// </summary>
        /// <remarks>
        /// Returns the details and status of a task id and the individual statuses of each device id in the list.
        /// </remarks>
        /// <exception cref="CLOUD.Artik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tid">Task ID.</param>
        /// <param name="count">Max results count. (optional)</param>
        /// <param name="offset">Result starting offset. (optional)</param>
        /// <param name="status">Status filter. Comma-separated statuses. (optional)</param>
        /// <param name="dids">Devices filter. Comma-separated device IDs. (optional)</param>
        /// <returns>ApiResponse of TaskStatusesEnvelope</returns>
        ApiResponse<TaskStatusesEnvelope> GetStatusesWithHttpInfo (string tid, int? count = null, int? offset = null, string status = null, string dids = null);
        /// <summary>
        /// Returns the history of the status changes for a specific task id, or for a specific device id in that task.
        /// </summary>
        /// <remarks>
        /// Returns the history of the status changes for a specific task id, or for a specific device id in that task.
        /// </remarks>
        /// <exception cref="CLOUD.Artik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tid">Task ID.</param>
        /// <param name="did">Device ID. Optional. (optional)</param>
        /// <returns>TaskStatusesHistoryEnvelope</returns>
        TaskStatusesHistoryEnvelope GetStatusesHistory (string tid, string did = null);

        /// <summary>
        /// Returns the history of the status changes for a specific task id, or for a specific device id in that task.
        /// </summary>
        /// <remarks>
        /// Returns the history of the status changes for a specific task id, or for a specific device id in that task.
        /// </remarks>
        /// <exception cref="CLOUD.Artik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tid">Task ID.</param>
        /// <param name="did">Device ID. Optional. (optional)</param>
        /// <returns>ApiResponse of TaskStatusesHistoryEnvelope</returns>
        ApiResponse<TaskStatusesHistoryEnvelope> GetStatusesHistoryWithHttpInfo (string tid, string did = null);
        /// <summary>
        /// Returns the details and global status of a specific task id.
        /// </summary>
        /// <remarks>
        /// Returns the details and global status of a specific task id.
        /// </remarks>
        /// <exception cref="CLOUD.Artik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tid">Task ID.</param>
        /// <returns>TaskEnvelope</returns>
        TaskEnvelope GetTaskByID (string tid);

        /// <summary>
        /// Returns the details and global status of a specific task id.
        /// </summary>
        /// <remarks>
        /// Returns the details and global status of a specific task id.
        /// </remarks>
        /// <exception cref="CLOUD.Artik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tid">Task ID.</param>
        /// <returns>ApiResponse of TaskEnvelope</returns>
        ApiResponse<TaskEnvelope> GetTaskByIDWithHttpInfo (string tid);
        /// <summary>
        /// Returns the all the tasks for a device type.
        /// </summary>
        /// <remarks>
        /// Returns the all the tasks for a device type.
        /// </remarks>
        /// <exception cref="CLOUD.Artik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dtid">Device Type ID.</param>
        /// <param name="count">Max results count. (optional)</param>
        /// <param name="offset">Result starting offset. (optional)</param>
        /// <param name="status">Status filter. Comma-separated statuses. (optional)</param>
        /// <param name="order">Sort results by a field. Valid fields: createdOn. (optional)</param>
        /// <param name="sort">Sort order. Valid values: asc or desc. (optional)</param>
        /// <returns>TaskListEnvelope</returns>
        TaskListEnvelope GetTasks (string dtid, int? count = null, int? offset = null, string status = null, string order = null, string sort = null);

        /// <summary>
        /// Returns the all the tasks for a device type.
        /// </summary>
        /// <remarks>
        /// Returns the all the tasks for a device type.
        /// </remarks>
        /// <exception cref="CLOUD.Artik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dtid">Device Type ID.</param>
        /// <param name="count">Max results count. (optional)</param>
        /// <param name="offset">Result starting offset. (optional)</param>
        /// <param name="status">Status filter. Comma-separated statuses. (optional)</param>
        /// <param name="order">Sort results by a field. Valid fields: createdOn. (optional)</param>
        /// <param name="sort">Sort order. Valid values: asc or desc. (optional)</param>
        /// <returns>ApiResponse of TaskListEnvelope</returns>
        ApiResponse<TaskListEnvelope> GetTasksWithHttpInfo (string dtid, int? count = null, int? offset = null, string status = null, string order = null, string sort = null);
        /// <summary>
        /// Query device properties across devices.
        /// </summary>
        /// <remarks>
        /// Query device properties across devices.
        /// </remarks>
        /// <exception cref="CLOUD.Artik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dtid">Device Type ID.</param>
        /// <param name="count">Max results count. (optional)</param>
        /// <param name="offset">Result starting offset. (optional)</param>
        /// <param name="filter">Query filter. Comma-separated key&#x3D;value pairs (optional)</param>
        /// <param name="includeTimestamp">Include timestamp. (optional)</param>
        /// <returns>MetadataQueryEnvelope</returns>
        MetadataQueryEnvelope QueryProperties (string dtid, int? count = null, int? offset = null, string filter = null, bool? includeTimestamp = null);

        /// <summary>
        /// Query device properties across devices.
        /// </summary>
        /// <remarks>
        /// Query device properties across devices.
        /// </remarks>
        /// <exception cref="CLOUD.Artik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dtid">Device Type ID.</param>
        /// <param name="count">Max results count. (optional)</param>
        /// <param name="offset">Result starting offset. (optional)</param>
        /// <param name="filter">Query filter. Comma-separated key&#x3D;value pairs (optional)</param>
        /// <param name="includeTimestamp">Include timestamp. (optional)</param>
        /// <returns>ApiResponse of MetadataQueryEnvelope</returns>
        ApiResponse<MetadataQueryEnvelope> QueryPropertiesWithHttpInfo (string dtid, int? count = null, int? offset = null, string filter = null, bool? includeTimestamp = null);
        /// <summary>
        /// Updates a device type information
        /// </summary>
        /// <remarks>
        /// Updates a device type information
        /// </remarks>
        /// <exception cref="CLOUD.Artik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dtid">Device type ID.</param>
        /// <param name="deviceTypeInfo">Device type info object to be set</param>
        /// <returns>DeviceTypesInfoEnvelope</returns>
        DeviceTypesInfoEnvelope UpdateDeviceTypesInfo (string dtid, DeviceTypesInfo deviceTypeInfo);

        /// <summary>
        /// Updates a device type information
        /// </summary>
        /// <remarks>
        /// Updates a device type information
        /// </remarks>
        /// <exception cref="CLOUD.Artik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dtid">Device type ID.</param>
        /// <param name="deviceTypeInfo">Device type info object to be set</param>
        /// <returns>ApiResponse of DeviceTypesInfoEnvelope</returns>
        ApiResponse<DeviceTypesInfoEnvelope> UpdateDeviceTypesInfoWithHttpInfo (string dtid, DeviceTypesInfo deviceTypeInfo);
        /// <summary>
        /// Updates a device&#39;s server properties.
        /// </summary>
        /// <remarks>
        /// Updates a device&#39;s server properties.
        /// </remarks>
        /// <exception cref="CLOUD.Artik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did">Device ID.</param>
        /// <param name="deviceProperties">Device properties object to be set</param>
        /// <returns>MetadataEnvelope</returns>
        MetadataEnvelope UpdateServerProperties (string did, Object deviceProperties);

        /// <summary>
        /// Updates a device&#39;s server properties.
        /// </summary>
        /// <remarks>
        /// Updates a device&#39;s server properties.
        /// </remarks>
        /// <exception cref="CLOUD.Artik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did">Device ID.</param>
        /// <param name="deviceProperties">Device properties object to be set</param>
        /// <returns>ApiResponse of MetadataEnvelope</returns>
        ApiResponse<MetadataEnvelope> UpdateServerPropertiesWithHttpInfo (string did, Object deviceProperties);
        /// <summary>
        /// Updates a task for all devices - For now just allows changing the state to cancelled.
        /// </summary>
        /// <remarks>
        /// Updates a task for all devices - For now just allows changing the state to cancelled.
        /// </remarks>
        /// <exception cref="CLOUD.Artik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tid">Task ID.</param>
        /// <param name="taskUpdateRequest">Task update request</param>
        /// <returns>TaskUpdateResponse</returns>
        TaskUpdateResponse UpdateTask (string tid, TaskUpdateRequest taskUpdateRequest);

        /// <summary>
        /// Updates a task for all devices - For now just allows changing the state to cancelled.
        /// </summary>
        /// <remarks>
        /// Updates a task for all devices - For now just allows changing the state to cancelled.
        /// </remarks>
        /// <exception cref="CLOUD.Artik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tid">Task ID.</param>
        /// <param name="taskUpdateRequest">Task update request</param>
        /// <returns>ApiResponse of TaskUpdateResponse</returns>
        ApiResponse<TaskUpdateResponse> UpdateTaskWithHttpInfo (string tid, TaskUpdateRequest taskUpdateRequest);
        /// <summary>
        /// Updates a task for a specific device - For now just allows changing the state to cancelled.
        /// </summary>
        /// <remarks>
        /// Updates a task for a specific device - For now just allows changing the state to cancelled.
        /// </remarks>
        /// <exception cref="CLOUD.Artik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tid">Task ID.</param>
        /// <param name="did">Device ID.</param>
        /// <param name="deviceTaskUpdateRequest">Device task update request</param>
        /// <returns>DeviceTaskUpdateResponse</returns>
        DeviceTaskUpdateResponse UpdateTaskForDevice (string tid, string did, DeviceTaskUpdateRequest deviceTaskUpdateRequest);

        /// <summary>
        /// Updates a task for a specific device - For now just allows changing the state to cancelled.
        /// </summary>
        /// <remarks>
        /// Updates a task for a specific device - For now just allows changing the state to cancelled.
        /// </remarks>
        /// <exception cref="CLOUD.Artik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tid">Task ID.</param>
        /// <param name="did">Device ID.</param>
        /// <param name="deviceTaskUpdateRequest">Device task update request</param>
        /// <returns>ApiResponse of DeviceTaskUpdateResponse</returns>
        ApiResponse<DeviceTaskUpdateResponse> UpdateTaskForDeviceWithHttpInfo (string tid, string did, DeviceTaskUpdateRequest deviceTaskUpdateRequest);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a new task for one or more devices
        /// </summary>
        /// <remarks>
        /// Create a new task for one or more devices
        /// </remarks>
        /// <exception cref="CLOUD.Artik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskPayload">Task object to be created</param>
        /// <returns>Task of TaskEnvelope</returns>
        System.Threading.Tasks.Task<TaskEnvelope> CreateTasksAsync (TaskRequest taskPayload);

        /// <summary>
        /// Create a new task for one or more devices
        /// </summary>
        /// <remarks>
        /// Create a new task for one or more devices
        /// </remarks>
        /// <exception cref="CLOUD.Artik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskPayload">Task object to be created</param>
        /// <returns>Task of ApiResponse (TaskEnvelope)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaskEnvelope>> CreateTasksAsyncWithHttpInfo (TaskRequest taskPayload);
        /// <summary>
        /// Deletes a device&#39;s properties.
        /// </summary>
        /// <remarks>
        /// Deletes a device&#39;s properties.
        /// </remarks>
        /// <exception cref="CLOUD.Artik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did">Device ID.</param>
        /// <returns>Task of MetadataEnvelope</returns>
        System.Threading.Tasks.Task<MetadataEnvelope> DeleteServerPropertiesAsync (string did);

        /// <summary>
        /// Deletes a device&#39;s properties.
        /// </summary>
        /// <remarks>
        /// Deletes a device&#39;s properties.
        /// </remarks>
        /// <exception cref="CLOUD.Artik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did">Device ID.</param>
        /// <returns>Task of ApiResponse (MetadataEnvelope)</returns>
        System.Threading.Tasks.Task<ApiResponse<MetadataEnvelope>> DeleteServerPropertiesAsyncWithHttpInfo (string did);
        /// <summary>
        /// Returns the list of tasks for a particular device id with optional status filter.
        /// </summary>
        /// <remarks>
        /// Returns the list of tasks for a particular device id with optional status filter.
        /// </remarks>
        /// <exception cref="CLOUD.Artik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did">Device ID.</param>
        /// <param name="count">Max results count. (optional)</param>
        /// <param name="offset">Result starting offset. (optional)</param>
        /// <param name="status">Status filter. Comma-separated statuses. (optional)</param>
        /// <param name="order">Sort results by a field. Valid fields: createdOn. (optional)</param>
        /// <param name="sort">Sort order. Valid values: asc or desc. (optional)</param>
        /// <returns>Task of TaskByDidListEnvelope</returns>
        System.Threading.Tasks.Task<TaskByDidListEnvelope> GetAllByDidAsync (string did, int? count = null, int? offset = null, string status = null, string order = null, string sort = null);

        /// <summary>
        /// Returns the list of tasks for a particular device id with optional status filter.
        /// </summary>
        /// <remarks>
        /// Returns the list of tasks for a particular device id with optional status filter.
        /// </remarks>
        /// <exception cref="CLOUD.Artik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did">Device ID.</param>
        /// <param name="count">Max results count. (optional)</param>
        /// <param name="offset">Result starting offset. (optional)</param>
        /// <param name="status">Status filter. Comma-separated statuses. (optional)</param>
        /// <param name="order">Sort results by a field. Valid fields: createdOn. (optional)</param>
        /// <param name="sort">Sort order. Valid values: asc or desc. (optional)</param>
        /// <returns>Task of ApiResponse (TaskByDidListEnvelope)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaskByDidListEnvelope>> GetAllByDidAsyncWithHttpInfo (string did, int? count = null, int? offset = null, string status = null, string order = null, string sort = null);
        /// <summary>
        /// Read a device type device management information.
        /// </summary>
        /// <remarks>
        /// Read a device type device management information.
        /// </remarks>
        /// <exception cref="CLOUD.Artik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dtid">Device type ID.</param>
        /// <returns>Task of DeviceTypesInfoEnvelope</returns>
        System.Threading.Tasks.Task<DeviceTypesInfoEnvelope> GetDeviceTypesInfoAsync (string dtid);

        /// <summary>
        /// Read a device type device management information.
        /// </summary>
        /// <remarks>
        /// Read a device type device management information.
        /// </remarks>
        /// <exception cref="CLOUD.Artik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dtid">Device type ID.</param>
        /// <returns>Task of ApiResponse (DeviceTypesInfoEnvelope)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeviceTypesInfoEnvelope>> GetDeviceTypesInfoAsyncWithHttpInfo (string dtid);
        /// <summary>
        /// Get a device type&#39;s device management manifest properties
        /// </summary>
        /// <remarks>
        /// Get a device type&#39;s device management manifest properties
        /// </remarks>
        /// <exception cref="CLOUD.Artik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dtid">Device Type ID.</param>
        /// <returns>Task of MetadataPropertiesEnvelope</returns>
        System.Threading.Tasks.Task<MetadataPropertiesEnvelope> GetManifestPropertiesAsync (string dtid);

        /// <summary>
        /// Get a device type&#39;s device management manifest properties
        /// </summary>
        /// <remarks>
        /// Get a device type&#39;s device management manifest properties
        /// </remarks>
        /// <exception cref="CLOUD.Artik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dtid">Device Type ID.</param>
        /// <returns>Task of ApiResponse (MetadataPropertiesEnvelope)</returns>
        System.Threading.Tasks.Task<ApiResponse<MetadataPropertiesEnvelope>> GetManifestPropertiesAsyncWithHttpInfo (string dtid);
        /// <summary>
        /// Read a device&#39;s properties.
        /// </summary>
        /// <remarks>
        /// Read a device&#39;s properties.
        /// </remarks>
        /// <exception cref="CLOUD.Artik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did">Device ID.</param>
        /// <param name="includeTimestamp">Include timestamp. (optional)</param>
        /// <returns>Task of MetadataEnvelope</returns>
        System.Threading.Tasks.Task<MetadataEnvelope> GetPropertiesAsync (string did, bool? includeTimestamp = null);

        /// <summary>
        /// Read a device&#39;s properties.
        /// </summary>
        /// <remarks>
        /// Read a device&#39;s properties.
        /// </remarks>
        /// <exception cref="CLOUD.Artik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did">Device ID.</param>
        /// <param name="includeTimestamp">Include timestamp. (optional)</param>
        /// <returns>Task of ApiResponse (MetadataEnvelope)</returns>
        System.Threading.Tasks.Task<ApiResponse<MetadataEnvelope>> GetPropertiesAsyncWithHttpInfo (string did, bool? includeTimestamp = null);
        /// <summary>
        /// Returns the details and status of a task id and the individual statuses of each device id in the list.
        /// </summary>
        /// <remarks>
        /// Returns the details and status of a task id and the individual statuses of each device id in the list.
        /// </remarks>
        /// <exception cref="CLOUD.Artik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tid">Task ID.</param>
        /// <param name="count">Max results count. (optional)</param>
        /// <param name="offset">Result starting offset. (optional)</param>
        /// <param name="status">Status filter. Comma-separated statuses. (optional)</param>
        /// <param name="dids">Devices filter. Comma-separated device IDs. (optional)</param>
        /// <returns>Task of TaskStatusesEnvelope</returns>
        System.Threading.Tasks.Task<TaskStatusesEnvelope> GetStatusesAsync (string tid, int? count = null, int? offset = null, string status = null, string dids = null);

        /// <summary>
        /// Returns the details and status of a task id and the individual statuses of each device id in the list.
        /// </summary>
        /// <remarks>
        /// Returns the details and status of a task id and the individual statuses of each device id in the list.
        /// </remarks>
        /// <exception cref="CLOUD.Artik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tid">Task ID.</param>
        /// <param name="count">Max results count. (optional)</param>
        /// <param name="offset">Result starting offset. (optional)</param>
        /// <param name="status">Status filter. Comma-separated statuses. (optional)</param>
        /// <param name="dids">Devices filter. Comma-separated device IDs. (optional)</param>
        /// <returns>Task of ApiResponse (TaskStatusesEnvelope)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaskStatusesEnvelope>> GetStatusesAsyncWithHttpInfo (string tid, int? count = null, int? offset = null, string status = null, string dids = null);
        /// <summary>
        /// Returns the history of the status changes for a specific task id, or for a specific device id in that task.
        /// </summary>
        /// <remarks>
        /// Returns the history of the status changes for a specific task id, or for a specific device id in that task.
        /// </remarks>
        /// <exception cref="CLOUD.Artik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tid">Task ID.</param>
        /// <param name="did">Device ID. Optional. (optional)</param>
        /// <returns>Task of TaskStatusesHistoryEnvelope</returns>
        System.Threading.Tasks.Task<TaskStatusesHistoryEnvelope> GetStatusesHistoryAsync (string tid, string did = null);

        /// <summary>
        /// Returns the history of the status changes for a specific task id, or for a specific device id in that task.
        /// </summary>
        /// <remarks>
        /// Returns the history of the status changes for a specific task id, or for a specific device id in that task.
        /// </remarks>
        /// <exception cref="CLOUD.Artik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tid">Task ID.</param>
        /// <param name="did">Device ID. Optional. (optional)</param>
        /// <returns>Task of ApiResponse (TaskStatusesHistoryEnvelope)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaskStatusesHistoryEnvelope>> GetStatusesHistoryAsyncWithHttpInfo (string tid, string did = null);
        /// <summary>
        /// Returns the details and global status of a specific task id.
        /// </summary>
        /// <remarks>
        /// Returns the details and global status of a specific task id.
        /// </remarks>
        /// <exception cref="CLOUD.Artik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tid">Task ID.</param>
        /// <returns>Task of TaskEnvelope</returns>
        System.Threading.Tasks.Task<TaskEnvelope> GetTaskByIDAsync (string tid);

        /// <summary>
        /// Returns the details and global status of a specific task id.
        /// </summary>
        /// <remarks>
        /// Returns the details and global status of a specific task id.
        /// </remarks>
        /// <exception cref="CLOUD.Artik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tid">Task ID.</param>
        /// <returns>Task of ApiResponse (TaskEnvelope)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaskEnvelope>> GetTaskByIDAsyncWithHttpInfo (string tid);
        /// <summary>
        /// Returns the all the tasks for a device type.
        /// </summary>
        /// <remarks>
        /// Returns the all the tasks for a device type.
        /// </remarks>
        /// <exception cref="CLOUD.Artik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dtid">Device Type ID.</param>
        /// <param name="count">Max results count. (optional)</param>
        /// <param name="offset">Result starting offset. (optional)</param>
        /// <param name="status">Status filter. Comma-separated statuses. (optional)</param>
        /// <param name="order">Sort results by a field. Valid fields: createdOn. (optional)</param>
        /// <param name="sort">Sort order. Valid values: asc or desc. (optional)</param>
        /// <returns>Task of TaskListEnvelope</returns>
        System.Threading.Tasks.Task<TaskListEnvelope> GetTasksAsync (string dtid, int? count = null, int? offset = null, string status = null, string order = null, string sort = null);

        /// <summary>
        /// Returns the all the tasks for a device type.
        /// </summary>
        /// <remarks>
        /// Returns the all the tasks for a device type.
        /// </remarks>
        /// <exception cref="CLOUD.Artik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dtid">Device Type ID.</param>
        /// <param name="count">Max results count. (optional)</param>
        /// <param name="offset">Result starting offset. (optional)</param>
        /// <param name="status">Status filter. Comma-separated statuses. (optional)</param>
        /// <param name="order">Sort results by a field. Valid fields: createdOn. (optional)</param>
        /// <param name="sort">Sort order. Valid values: asc or desc. (optional)</param>
        /// <returns>Task of ApiResponse (TaskListEnvelope)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaskListEnvelope>> GetTasksAsyncWithHttpInfo (string dtid, int? count = null, int? offset = null, string status = null, string order = null, string sort = null);
        /// <summary>
        /// Query device properties across devices.
        /// </summary>
        /// <remarks>
        /// Query device properties across devices.
        /// </remarks>
        /// <exception cref="CLOUD.Artik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dtid">Device Type ID.</param>
        /// <param name="count">Max results count. (optional)</param>
        /// <param name="offset">Result starting offset. (optional)</param>
        /// <param name="filter">Query filter. Comma-separated key&#x3D;value pairs (optional)</param>
        /// <param name="includeTimestamp">Include timestamp. (optional)</param>
        /// <returns>Task of MetadataQueryEnvelope</returns>
        System.Threading.Tasks.Task<MetadataQueryEnvelope> QueryPropertiesAsync (string dtid, int? count = null, int? offset = null, string filter = null, bool? includeTimestamp = null);

        /// <summary>
        /// Query device properties across devices.
        /// </summary>
        /// <remarks>
        /// Query device properties across devices.
        /// </remarks>
        /// <exception cref="CLOUD.Artik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dtid">Device Type ID.</param>
        /// <param name="count">Max results count. (optional)</param>
        /// <param name="offset">Result starting offset. (optional)</param>
        /// <param name="filter">Query filter. Comma-separated key&#x3D;value pairs (optional)</param>
        /// <param name="includeTimestamp">Include timestamp. (optional)</param>
        /// <returns>Task of ApiResponse (MetadataQueryEnvelope)</returns>
        System.Threading.Tasks.Task<ApiResponse<MetadataQueryEnvelope>> QueryPropertiesAsyncWithHttpInfo (string dtid, int? count = null, int? offset = null, string filter = null, bool? includeTimestamp = null);
        /// <summary>
        /// Updates a device type information
        /// </summary>
        /// <remarks>
        /// Updates a device type information
        /// </remarks>
        /// <exception cref="CLOUD.Artik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dtid">Device type ID.</param>
        /// <param name="deviceTypeInfo">Device type info object to be set</param>
        /// <returns>Task of DeviceTypesInfoEnvelope</returns>
        System.Threading.Tasks.Task<DeviceTypesInfoEnvelope> UpdateDeviceTypesInfoAsync (string dtid, DeviceTypesInfo deviceTypeInfo);

        /// <summary>
        /// Updates a device type information
        /// </summary>
        /// <remarks>
        /// Updates a device type information
        /// </remarks>
        /// <exception cref="CLOUD.Artik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dtid">Device type ID.</param>
        /// <param name="deviceTypeInfo">Device type info object to be set</param>
        /// <returns>Task of ApiResponse (DeviceTypesInfoEnvelope)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeviceTypesInfoEnvelope>> UpdateDeviceTypesInfoAsyncWithHttpInfo (string dtid, DeviceTypesInfo deviceTypeInfo);
        /// <summary>
        /// Updates a device&#39;s server properties.
        /// </summary>
        /// <remarks>
        /// Updates a device&#39;s server properties.
        /// </remarks>
        /// <exception cref="CLOUD.Artik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did">Device ID.</param>
        /// <param name="deviceProperties">Device properties object to be set</param>
        /// <returns>Task of MetadataEnvelope</returns>
        System.Threading.Tasks.Task<MetadataEnvelope> UpdateServerPropertiesAsync (string did, Object deviceProperties);

        /// <summary>
        /// Updates a device&#39;s server properties.
        /// </summary>
        /// <remarks>
        /// Updates a device&#39;s server properties.
        /// </remarks>
        /// <exception cref="CLOUD.Artik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did">Device ID.</param>
        /// <param name="deviceProperties">Device properties object to be set</param>
        /// <returns>Task of ApiResponse (MetadataEnvelope)</returns>
        System.Threading.Tasks.Task<ApiResponse<MetadataEnvelope>> UpdateServerPropertiesAsyncWithHttpInfo (string did, Object deviceProperties);
        /// <summary>
        /// Updates a task for all devices - For now just allows changing the state to cancelled.
        /// </summary>
        /// <remarks>
        /// Updates a task for all devices - For now just allows changing the state to cancelled.
        /// </remarks>
        /// <exception cref="CLOUD.Artik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tid">Task ID.</param>
        /// <param name="taskUpdateRequest">Task update request</param>
        /// <returns>Task of TaskUpdateResponse</returns>
        System.Threading.Tasks.Task<TaskUpdateResponse> UpdateTaskAsync (string tid, TaskUpdateRequest taskUpdateRequest);

        /// <summary>
        /// Updates a task for all devices - For now just allows changing the state to cancelled.
        /// </summary>
        /// <remarks>
        /// Updates a task for all devices - For now just allows changing the state to cancelled.
        /// </remarks>
        /// <exception cref="CLOUD.Artik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tid">Task ID.</param>
        /// <param name="taskUpdateRequest">Task update request</param>
        /// <returns>Task of ApiResponse (TaskUpdateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<TaskUpdateResponse>> UpdateTaskAsyncWithHttpInfo (string tid, TaskUpdateRequest taskUpdateRequest);
        /// <summary>
        /// Updates a task for a specific device - For now just allows changing the state to cancelled.
        /// </summary>
        /// <remarks>
        /// Updates a task for a specific device - For now just allows changing the state to cancelled.
        /// </remarks>
        /// <exception cref="CLOUD.Artik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tid">Task ID.</param>
        /// <param name="did">Device ID.</param>
        /// <param name="deviceTaskUpdateRequest">Device task update request</param>
        /// <returns>Task of DeviceTaskUpdateResponse</returns>
        System.Threading.Tasks.Task<DeviceTaskUpdateResponse> UpdateTaskForDeviceAsync (string tid, string did, DeviceTaskUpdateRequest deviceTaskUpdateRequest);

        /// <summary>
        /// Updates a task for a specific device - For now just allows changing the state to cancelled.
        /// </summary>
        /// <remarks>
        /// Updates a task for a specific device - For now just allows changing the state to cancelled.
        /// </remarks>
        /// <exception cref="CLOUD.Artik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tid">Task ID.</param>
        /// <param name="did">Device ID.</param>
        /// <param name="deviceTaskUpdateRequest">Device task update request</param>
        /// <returns>Task of ApiResponse (DeviceTaskUpdateResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<DeviceTaskUpdateResponse>> UpdateTaskForDeviceAsyncWithHttpInfo (string tid, string did, DeviceTaskUpdateRequest deviceTaskUpdateRequest);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DevicesManagementApi : IDevicesManagementApi
    {
        private CLOUD.Artik.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DevicesManagementApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DevicesManagementApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = CLOUD.Artik.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DevicesManagementApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DevicesManagementApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = CLOUD.Artik.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public CLOUD.Artik.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a new task for one or more devices Create a new task for one or more devices
        /// </summary>
        /// <exception cref="CLOUD.Artik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskPayload">Task object to be created</param>
        /// <returns>TaskEnvelope</returns>
        public TaskEnvelope CreateTasks (TaskRequest taskPayload)
        {
             ApiResponse<TaskEnvelope> localVarResponse = CreateTasksWithHttpInfo(taskPayload);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new task for one or more devices Create a new task for one or more devices
        /// </summary>
        /// <exception cref="CLOUD.Artik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskPayload">Task object to be created</param>
        /// <returns>ApiResponse of TaskEnvelope</returns>
        public ApiResponse< TaskEnvelope > CreateTasksWithHttpInfo (TaskRequest taskPayload)
        {
            // verify the required parameter 'taskPayload' is set
            if (taskPayload == null)
                throw new ApiException(400, "Missing required parameter 'taskPayload' when calling DevicesManagementApi->CreateTasks");

            var localVarPath = "/devicemgmt/tasks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (taskPayload != null && taskPayload.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(taskPayload); // http body (model) parameter
            }
            else
            {
                localVarPostBody = taskPayload; // byte array
            }

            // authentication (artikcloud_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateTasks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaskEnvelope>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TaskEnvelope) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaskEnvelope)));
            
        }

        /// <summary>
        /// Create a new task for one or more devices Create a new task for one or more devices
        /// </summary>
        /// <exception cref="CLOUD.Artik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskPayload">Task object to be created</param>
        /// <returns>Task of TaskEnvelope</returns>
        public async System.Threading.Tasks.Task<TaskEnvelope> CreateTasksAsync (TaskRequest taskPayload)
        {
             ApiResponse<TaskEnvelope> localVarResponse = await CreateTasksAsyncWithHttpInfo(taskPayload);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new task for one or more devices Create a new task for one or more devices
        /// </summary>
        /// <exception cref="CLOUD.Artik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="taskPayload">Task object to be created</param>
        /// <returns>Task of ApiResponse (TaskEnvelope)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TaskEnvelope>> CreateTasksAsyncWithHttpInfo (TaskRequest taskPayload)
        {
            // verify the required parameter 'taskPayload' is set
            if (taskPayload == null)
                throw new ApiException(400, "Missing required parameter 'taskPayload' when calling DevicesManagementApi->CreateTasks");

            var localVarPath = "/devicemgmt/tasks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (taskPayload != null && taskPayload.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(taskPayload); // http body (model) parameter
            }
            else
            {
                localVarPostBody = taskPayload; // byte array
            }

            // authentication (artikcloud_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateTasks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaskEnvelope>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TaskEnvelope) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaskEnvelope)));
            
        }

        /// <summary>
        /// Deletes a device&#39;s properties. Deletes a device&#39;s properties.
        /// </summary>
        /// <exception cref="CLOUD.Artik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did">Device ID.</param>
        /// <returns>MetadataEnvelope</returns>
        public MetadataEnvelope DeleteServerProperties (string did)
        {
             ApiResponse<MetadataEnvelope> localVarResponse = DeleteServerPropertiesWithHttpInfo(did);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Deletes a device&#39;s properties. Deletes a device&#39;s properties.
        /// </summary>
        /// <exception cref="CLOUD.Artik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did">Device ID.</param>
        /// <returns>ApiResponse of MetadataEnvelope</returns>
        public ApiResponse< MetadataEnvelope > DeleteServerPropertiesWithHttpInfo (string did)
        {
            // verify the required parameter 'did' is set
            if (did == null)
                throw new ApiException(400, "Missing required parameter 'did' when calling DevicesManagementApi->DeleteServerProperties");

            var localVarPath = "/devicemgmt/devices/{did}/serverproperties";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (did != null) localVarPathParams.Add("did", Configuration.ApiClient.ParameterToString(did)); // path parameter

            // authentication (artikcloud_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteServerProperties", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MetadataEnvelope>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MetadataEnvelope) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MetadataEnvelope)));
            
        }

        /// <summary>
        /// Deletes a device&#39;s properties. Deletes a device&#39;s properties.
        /// </summary>
        /// <exception cref="CLOUD.Artik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did">Device ID.</param>
        /// <returns>Task of MetadataEnvelope</returns>
        public async System.Threading.Tasks.Task<MetadataEnvelope> DeleteServerPropertiesAsync (string did)
        {
             ApiResponse<MetadataEnvelope> localVarResponse = await DeleteServerPropertiesAsyncWithHttpInfo(did);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Deletes a device&#39;s properties. Deletes a device&#39;s properties.
        /// </summary>
        /// <exception cref="CLOUD.Artik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did">Device ID.</param>
        /// <returns>Task of ApiResponse (MetadataEnvelope)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MetadataEnvelope>> DeleteServerPropertiesAsyncWithHttpInfo (string did)
        {
            // verify the required parameter 'did' is set
            if (did == null)
                throw new ApiException(400, "Missing required parameter 'did' when calling DevicesManagementApi->DeleteServerProperties");

            var localVarPath = "/devicemgmt/devices/{did}/serverproperties";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (did != null) localVarPathParams.Add("did", Configuration.ApiClient.ParameterToString(did)); // path parameter

            // authentication (artikcloud_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.DELETE, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("DeleteServerProperties", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MetadataEnvelope>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MetadataEnvelope) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MetadataEnvelope)));
            
        }

        /// <summary>
        /// Returns the list of tasks for a particular device id with optional status filter. Returns the list of tasks for a particular device id with optional status filter.
        /// </summary>
        /// <exception cref="CLOUD.Artik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did">Device ID.</param>
        /// <param name="count">Max results count. (optional)</param>
        /// <param name="offset">Result starting offset. (optional)</param>
        /// <param name="status">Status filter. Comma-separated statuses. (optional)</param>
        /// <param name="order">Sort results by a field. Valid fields: createdOn. (optional)</param>
        /// <param name="sort">Sort order. Valid values: asc or desc. (optional)</param>
        /// <returns>TaskByDidListEnvelope</returns>
        public TaskByDidListEnvelope GetAllByDid (string did, int? count = null, int? offset = null, string status = null, string order = null, string sort = null)
        {
             ApiResponse<TaskByDidListEnvelope> localVarResponse = GetAllByDidWithHttpInfo(did, count, offset, status, order, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the list of tasks for a particular device id with optional status filter. Returns the list of tasks for a particular device id with optional status filter.
        /// </summary>
        /// <exception cref="CLOUD.Artik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did">Device ID.</param>
        /// <param name="count">Max results count. (optional)</param>
        /// <param name="offset">Result starting offset. (optional)</param>
        /// <param name="status">Status filter. Comma-separated statuses. (optional)</param>
        /// <param name="order">Sort results by a field. Valid fields: createdOn. (optional)</param>
        /// <param name="sort">Sort order. Valid values: asc or desc. (optional)</param>
        /// <returns>ApiResponse of TaskByDidListEnvelope</returns>
        public ApiResponse< TaskByDidListEnvelope > GetAllByDidWithHttpInfo (string did, int? count = null, int? offset = null, string status = null, string order = null, string sort = null)
        {
            // verify the required parameter 'did' is set
            if (did == null)
                throw new ApiException(400, "Missing required parameter 'did' when calling DevicesManagementApi->GetAllByDid");

            var localVarPath = "/devicemgmt/devices/{did}/tasks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (did != null) localVarPathParams.Add("did", Configuration.ApiClient.ParameterToString(did)); // path parameter
            if (count != null) localVarQueryParams.Add("count", Configuration.ApiClient.ParameterToString(count)); // query parameter
            if (offset != null) localVarQueryParams.Add("offset", Configuration.ApiClient.ParameterToString(offset)); // query parameter
            if (status != null) localVarQueryParams.Add("status", Configuration.ApiClient.ParameterToString(status)); // query parameter
            if (order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // query parameter
            if (sort != null) localVarQueryParams.Add("sort", Configuration.ApiClient.ParameterToString(sort)); // query parameter

            // authentication (artikcloud_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllByDid", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaskByDidListEnvelope>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TaskByDidListEnvelope) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaskByDidListEnvelope)));
            
        }

        /// <summary>
        /// Returns the list of tasks for a particular device id with optional status filter. Returns the list of tasks for a particular device id with optional status filter.
        /// </summary>
        /// <exception cref="CLOUD.Artik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did">Device ID.</param>
        /// <param name="count">Max results count. (optional)</param>
        /// <param name="offset">Result starting offset. (optional)</param>
        /// <param name="status">Status filter. Comma-separated statuses. (optional)</param>
        /// <param name="order">Sort results by a field. Valid fields: createdOn. (optional)</param>
        /// <param name="sort">Sort order. Valid values: asc or desc. (optional)</param>
        /// <returns>Task of TaskByDidListEnvelope</returns>
        public async System.Threading.Tasks.Task<TaskByDidListEnvelope> GetAllByDidAsync (string did, int? count = null, int? offset = null, string status = null, string order = null, string sort = null)
        {
             ApiResponse<TaskByDidListEnvelope> localVarResponse = await GetAllByDidAsyncWithHttpInfo(did, count, offset, status, order, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the list of tasks for a particular device id with optional status filter. Returns the list of tasks for a particular device id with optional status filter.
        /// </summary>
        /// <exception cref="CLOUD.Artik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did">Device ID.</param>
        /// <param name="count">Max results count. (optional)</param>
        /// <param name="offset">Result starting offset. (optional)</param>
        /// <param name="status">Status filter. Comma-separated statuses. (optional)</param>
        /// <param name="order">Sort results by a field. Valid fields: createdOn. (optional)</param>
        /// <param name="sort">Sort order. Valid values: asc or desc. (optional)</param>
        /// <returns>Task of ApiResponse (TaskByDidListEnvelope)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TaskByDidListEnvelope>> GetAllByDidAsyncWithHttpInfo (string did, int? count = null, int? offset = null, string status = null, string order = null, string sort = null)
        {
            // verify the required parameter 'did' is set
            if (did == null)
                throw new ApiException(400, "Missing required parameter 'did' when calling DevicesManagementApi->GetAllByDid");

            var localVarPath = "/devicemgmt/devices/{did}/tasks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (did != null) localVarPathParams.Add("did", Configuration.ApiClient.ParameterToString(did)); // path parameter
            if (count != null) localVarQueryParams.Add("count", Configuration.ApiClient.ParameterToString(count)); // query parameter
            if (offset != null) localVarQueryParams.Add("offset", Configuration.ApiClient.ParameterToString(offset)); // query parameter
            if (status != null) localVarQueryParams.Add("status", Configuration.ApiClient.ParameterToString(status)); // query parameter
            if (order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // query parameter
            if (sort != null) localVarQueryParams.Add("sort", Configuration.ApiClient.ParameterToString(sort)); // query parameter

            // authentication (artikcloud_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetAllByDid", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaskByDidListEnvelope>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TaskByDidListEnvelope) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaskByDidListEnvelope)));
            
        }

        /// <summary>
        /// Read a device type device management information. Read a device type device management information.
        /// </summary>
        /// <exception cref="CLOUD.Artik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dtid">Device type ID.</param>
        /// <returns>DeviceTypesInfoEnvelope</returns>
        public DeviceTypesInfoEnvelope GetDeviceTypesInfo (string dtid)
        {
             ApiResponse<DeviceTypesInfoEnvelope> localVarResponse = GetDeviceTypesInfoWithHttpInfo(dtid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read a device type device management information. Read a device type device management information.
        /// </summary>
        /// <exception cref="CLOUD.Artik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dtid">Device type ID.</param>
        /// <returns>ApiResponse of DeviceTypesInfoEnvelope</returns>
        public ApiResponse< DeviceTypesInfoEnvelope > GetDeviceTypesInfoWithHttpInfo (string dtid)
        {
            // verify the required parameter 'dtid' is set
            if (dtid == null)
                throw new ApiException(400, "Missing required parameter 'dtid' when calling DevicesManagementApi->GetDeviceTypesInfo");

            var localVarPath = "/devicemgmt/devicetypes/{dtid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (dtid != null) localVarPathParams.Add("dtid", Configuration.ApiClient.ParameterToString(dtid)); // path parameter

            // authentication (artikcloud_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDeviceTypesInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeviceTypesInfoEnvelope>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeviceTypesInfoEnvelope) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeviceTypesInfoEnvelope)));
            
        }

        /// <summary>
        /// Read a device type device management information. Read a device type device management information.
        /// </summary>
        /// <exception cref="CLOUD.Artik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dtid">Device type ID.</param>
        /// <returns>Task of DeviceTypesInfoEnvelope</returns>
        public async System.Threading.Tasks.Task<DeviceTypesInfoEnvelope> GetDeviceTypesInfoAsync (string dtid)
        {
             ApiResponse<DeviceTypesInfoEnvelope> localVarResponse = await GetDeviceTypesInfoAsyncWithHttpInfo(dtid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read a device type device management information. Read a device type device management information.
        /// </summary>
        /// <exception cref="CLOUD.Artik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dtid">Device type ID.</param>
        /// <returns>Task of ApiResponse (DeviceTypesInfoEnvelope)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeviceTypesInfoEnvelope>> GetDeviceTypesInfoAsyncWithHttpInfo (string dtid)
        {
            // verify the required parameter 'dtid' is set
            if (dtid == null)
                throw new ApiException(400, "Missing required parameter 'dtid' when calling DevicesManagementApi->GetDeviceTypesInfo");

            var localVarPath = "/devicemgmt/devicetypes/{dtid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (dtid != null) localVarPathParams.Add("dtid", Configuration.ApiClient.ParameterToString(dtid)); // path parameter

            // authentication (artikcloud_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetDeviceTypesInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeviceTypesInfoEnvelope>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeviceTypesInfoEnvelope) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeviceTypesInfoEnvelope)));
            
        }

        /// <summary>
        /// Get a device type&#39;s device management manifest properties Get a device type&#39;s device management manifest properties
        /// </summary>
        /// <exception cref="CLOUD.Artik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dtid">Device Type ID.</param>
        /// <returns>MetadataPropertiesEnvelope</returns>
        public MetadataPropertiesEnvelope GetManifestProperties (string dtid)
        {
             ApiResponse<MetadataPropertiesEnvelope> localVarResponse = GetManifestPropertiesWithHttpInfo(dtid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get a device type&#39;s device management manifest properties Get a device type&#39;s device management manifest properties
        /// </summary>
        /// <exception cref="CLOUD.Artik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dtid">Device Type ID.</param>
        /// <returns>ApiResponse of MetadataPropertiesEnvelope</returns>
        public ApiResponse< MetadataPropertiesEnvelope > GetManifestPropertiesWithHttpInfo (string dtid)
        {
            // verify the required parameter 'dtid' is set
            if (dtid == null)
                throw new ApiException(400, "Missing required parameter 'dtid' when calling DevicesManagementApi->GetManifestProperties");

            var localVarPath = "/devicemgmt/devicetypes/{dtid}/manifest/properties";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (dtid != null) localVarPathParams.Add("dtid", Configuration.ApiClient.ParameterToString(dtid)); // path parameter

            // authentication (artikcloud_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetManifestProperties", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MetadataPropertiesEnvelope>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MetadataPropertiesEnvelope) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MetadataPropertiesEnvelope)));
            
        }

        /// <summary>
        /// Get a device type&#39;s device management manifest properties Get a device type&#39;s device management manifest properties
        /// </summary>
        /// <exception cref="CLOUD.Artik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dtid">Device Type ID.</param>
        /// <returns>Task of MetadataPropertiesEnvelope</returns>
        public async System.Threading.Tasks.Task<MetadataPropertiesEnvelope> GetManifestPropertiesAsync (string dtid)
        {
             ApiResponse<MetadataPropertiesEnvelope> localVarResponse = await GetManifestPropertiesAsyncWithHttpInfo(dtid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get a device type&#39;s device management manifest properties Get a device type&#39;s device management manifest properties
        /// </summary>
        /// <exception cref="CLOUD.Artik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dtid">Device Type ID.</param>
        /// <returns>Task of ApiResponse (MetadataPropertiesEnvelope)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MetadataPropertiesEnvelope>> GetManifestPropertiesAsyncWithHttpInfo (string dtid)
        {
            // verify the required parameter 'dtid' is set
            if (dtid == null)
                throw new ApiException(400, "Missing required parameter 'dtid' when calling DevicesManagementApi->GetManifestProperties");

            var localVarPath = "/devicemgmt/devicetypes/{dtid}/manifest/properties";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (dtid != null) localVarPathParams.Add("dtid", Configuration.ApiClient.ParameterToString(dtid)); // path parameter

            // authentication (artikcloud_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetManifestProperties", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MetadataPropertiesEnvelope>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MetadataPropertiesEnvelope) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MetadataPropertiesEnvelope)));
            
        }

        /// <summary>
        /// Read a device&#39;s properties. Read a device&#39;s properties.
        /// </summary>
        /// <exception cref="CLOUD.Artik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did">Device ID.</param>
        /// <param name="includeTimestamp">Include timestamp. (optional)</param>
        /// <returns>MetadataEnvelope</returns>
        public MetadataEnvelope GetProperties (string did, bool? includeTimestamp = null)
        {
             ApiResponse<MetadataEnvelope> localVarResponse = GetPropertiesWithHttpInfo(did, includeTimestamp);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Read a device&#39;s properties. Read a device&#39;s properties.
        /// </summary>
        /// <exception cref="CLOUD.Artik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did">Device ID.</param>
        /// <param name="includeTimestamp">Include timestamp. (optional)</param>
        /// <returns>ApiResponse of MetadataEnvelope</returns>
        public ApiResponse< MetadataEnvelope > GetPropertiesWithHttpInfo (string did, bool? includeTimestamp = null)
        {
            // verify the required parameter 'did' is set
            if (did == null)
                throw new ApiException(400, "Missing required parameter 'did' when calling DevicesManagementApi->GetProperties");

            var localVarPath = "/devicemgmt/devices/{did}/properties";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (did != null) localVarPathParams.Add("did", Configuration.ApiClient.ParameterToString(did)); // path parameter
            if (includeTimestamp != null) localVarQueryParams.Add("includeTimestamp", Configuration.ApiClient.ParameterToString(includeTimestamp)); // query parameter

            // authentication (artikcloud_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProperties", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MetadataEnvelope>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MetadataEnvelope) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MetadataEnvelope)));
            
        }

        /// <summary>
        /// Read a device&#39;s properties. Read a device&#39;s properties.
        /// </summary>
        /// <exception cref="CLOUD.Artik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did">Device ID.</param>
        /// <param name="includeTimestamp">Include timestamp. (optional)</param>
        /// <returns>Task of MetadataEnvelope</returns>
        public async System.Threading.Tasks.Task<MetadataEnvelope> GetPropertiesAsync (string did, bool? includeTimestamp = null)
        {
             ApiResponse<MetadataEnvelope> localVarResponse = await GetPropertiesAsyncWithHttpInfo(did, includeTimestamp);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Read a device&#39;s properties. Read a device&#39;s properties.
        /// </summary>
        /// <exception cref="CLOUD.Artik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did">Device ID.</param>
        /// <param name="includeTimestamp">Include timestamp. (optional)</param>
        /// <returns>Task of ApiResponse (MetadataEnvelope)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MetadataEnvelope>> GetPropertiesAsyncWithHttpInfo (string did, bool? includeTimestamp = null)
        {
            // verify the required parameter 'did' is set
            if (did == null)
                throw new ApiException(400, "Missing required parameter 'did' when calling DevicesManagementApi->GetProperties");

            var localVarPath = "/devicemgmt/devices/{did}/properties";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (did != null) localVarPathParams.Add("did", Configuration.ApiClient.ParameterToString(did)); // path parameter
            if (includeTimestamp != null) localVarQueryParams.Add("includeTimestamp", Configuration.ApiClient.ParameterToString(includeTimestamp)); // query parameter

            // authentication (artikcloud_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetProperties", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MetadataEnvelope>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MetadataEnvelope) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MetadataEnvelope)));
            
        }

        /// <summary>
        /// Returns the details and status of a task id and the individual statuses of each device id in the list. Returns the details and status of a task id and the individual statuses of each device id in the list.
        /// </summary>
        /// <exception cref="CLOUD.Artik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tid">Task ID.</param>
        /// <param name="count">Max results count. (optional)</param>
        /// <param name="offset">Result starting offset. (optional)</param>
        /// <param name="status">Status filter. Comma-separated statuses. (optional)</param>
        /// <param name="dids">Devices filter. Comma-separated device IDs. (optional)</param>
        /// <returns>TaskStatusesEnvelope</returns>
        public TaskStatusesEnvelope GetStatuses (string tid, int? count = null, int? offset = null, string status = null, string dids = null)
        {
             ApiResponse<TaskStatusesEnvelope> localVarResponse = GetStatusesWithHttpInfo(tid, count, offset, status, dids);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the details and status of a task id and the individual statuses of each device id in the list. Returns the details and status of a task id and the individual statuses of each device id in the list.
        /// </summary>
        /// <exception cref="CLOUD.Artik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tid">Task ID.</param>
        /// <param name="count">Max results count. (optional)</param>
        /// <param name="offset">Result starting offset. (optional)</param>
        /// <param name="status">Status filter. Comma-separated statuses. (optional)</param>
        /// <param name="dids">Devices filter. Comma-separated device IDs. (optional)</param>
        /// <returns>ApiResponse of TaskStatusesEnvelope</returns>
        public ApiResponse< TaskStatusesEnvelope > GetStatusesWithHttpInfo (string tid, int? count = null, int? offset = null, string status = null, string dids = null)
        {
            // verify the required parameter 'tid' is set
            if (tid == null)
                throw new ApiException(400, "Missing required parameter 'tid' when calling DevicesManagementApi->GetStatuses");

            var localVarPath = "/devicemgmt/tasks/{tid}/statuses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (tid != null) localVarPathParams.Add("tid", Configuration.ApiClient.ParameterToString(tid)); // path parameter
            if (count != null) localVarQueryParams.Add("count", Configuration.ApiClient.ParameterToString(count)); // query parameter
            if (offset != null) localVarQueryParams.Add("offset", Configuration.ApiClient.ParameterToString(offset)); // query parameter
            if (status != null) localVarQueryParams.Add("status", Configuration.ApiClient.ParameterToString(status)); // query parameter
            if (dids != null) localVarQueryParams.Add("dids", Configuration.ApiClient.ParameterToString(dids)); // query parameter

            // authentication (artikcloud_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStatuses", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaskStatusesEnvelope>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TaskStatusesEnvelope) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaskStatusesEnvelope)));
            
        }

        /// <summary>
        /// Returns the details and status of a task id and the individual statuses of each device id in the list. Returns the details and status of a task id and the individual statuses of each device id in the list.
        /// </summary>
        /// <exception cref="CLOUD.Artik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tid">Task ID.</param>
        /// <param name="count">Max results count. (optional)</param>
        /// <param name="offset">Result starting offset. (optional)</param>
        /// <param name="status">Status filter. Comma-separated statuses. (optional)</param>
        /// <param name="dids">Devices filter. Comma-separated device IDs. (optional)</param>
        /// <returns>Task of TaskStatusesEnvelope</returns>
        public async System.Threading.Tasks.Task<TaskStatusesEnvelope> GetStatusesAsync (string tid, int? count = null, int? offset = null, string status = null, string dids = null)
        {
             ApiResponse<TaskStatusesEnvelope> localVarResponse = await GetStatusesAsyncWithHttpInfo(tid, count, offset, status, dids);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the details and status of a task id and the individual statuses of each device id in the list. Returns the details and status of a task id and the individual statuses of each device id in the list.
        /// </summary>
        /// <exception cref="CLOUD.Artik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tid">Task ID.</param>
        /// <param name="count">Max results count. (optional)</param>
        /// <param name="offset">Result starting offset. (optional)</param>
        /// <param name="status">Status filter. Comma-separated statuses. (optional)</param>
        /// <param name="dids">Devices filter. Comma-separated device IDs. (optional)</param>
        /// <returns>Task of ApiResponse (TaskStatusesEnvelope)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TaskStatusesEnvelope>> GetStatusesAsyncWithHttpInfo (string tid, int? count = null, int? offset = null, string status = null, string dids = null)
        {
            // verify the required parameter 'tid' is set
            if (tid == null)
                throw new ApiException(400, "Missing required parameter 'tid' when calling DevicesManagementApi->GetStatuses");

            var localVarPath = "/devicemgmt/tasks/{tid}/statuses";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (tid != null) localVarPathParams.Add("tid", Configuration.ApiClient.ParameterToString(tid)); // path parameter
            if (count != null) localVarQueryParams.Add("count", Configuration.ApiClient.ParameterToString(count)); // query parameter
            if (offset != null) localVarQueryParams.Add("offset", Configuration.ApiClient.ParameterToString(offset)); // query parameter
            if (status != null) localVarQueryParams.Add("status", Configuration.ApiClient.ParameterToString(status)); // query parameter
            if (dids != null) localVarQueryParams.Add("dids", Configuration.ApiClient.ParameterToString(dids)); // query parameter

            // authentication (artikcloud_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStatuses", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaskStatusesEnvelope>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TaskStatusesEnvelope) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaskStatusesEnvelope)));
            
        }

        /// <summary>
        /// Returns the history of the status changes for a specific task id, or for a specific device id in that task. Returns the history of the status changes for a specific task id, or for a specific device id in that task.
        /// </summary>
        /// <exception cref="CLOUD.Artik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tid">Task ID.</param>
        /// <param name="did">Device ID. Optional. (optional)</param>
        /// <returns>TaskStatusesHistoryEnvelope</returns>
        public TaskStatusesHistoryEnvelope GetStatusesHistory (string tid, string did = null)
        {
             ApiResponse<TaskStatusesHistoryEnvelope> localVarResponse = GetStatusesHistoryWithHttpInfo(tid, did);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the history of the status changes for a specific task id, or for a specific device id in that task. Returns the history of the status changes for a specific task id, or for a specific device id in that task.
        /// </summary>
        /// <exception cref="CLOUD.Artik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tid">Task ID.</param>
        /// <param name="did">Device ID. Optional. (optional)</param>
        /// <returns>ApiResponse of TaskStatusesHistoryEnvelope</returns>
        public ApiResponse< TaskStatusesHistoryEnvelope > GetStatusesHistoryWithHttpInfo (string tid, string did = null)
        {
            // verify the required parameter 'tid' is set
            if (tid == null)
                throw new ApiException(400, "Missing required parameter 'tid' when calling DevicesManagementApi->GetStatusesHistory");

            var localVarPath = "/devicemgmt/tasks/{tid}/statuses/history";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (tid != null) localVarPathParams.Add("tid", Configuration.ApiClient.ParameterToString(tid)); // path parameter
            if (did != null) localVarQueryParams.Add("did", Configuration.ApiClient.ParameterToString(did)); // query parameter

            // authentication (artikcloud_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStatusesHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaskStatusesHistoryEnvelope>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TaskStatusesHistoryEnvelope) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaskStatusesHistoryEnvelope)));
            
        }

        /// <summary>
        /// Returns the history of the status changes for a specific task id, or for a specific device id in that task. Returns the history of the status changes for a specific task id, or for a specific device id in that task.
        /// </summary>
        /// <exception cref="CLOUD.Artik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tid">Task ID.</param>
        /// <param name="did">Device ID. Optional. (optional)</param>
        /// <returns>Task of TaskStatusesHistoryEnvelope</returns>
        public async System.Threading.Tasks.Task<TaskStatusesHistoryEnvelope> GetStatusesHistoryAsync (string tid, string did = null)
        {
             ApiResponse<TaskStatusesHistoryEnvelope> localVarResponse = await GetStatusesHistoryAsyncWithHttpInfo(tid, did);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the history of the status changes for a specific task id, or for a specific device id in that task. Returns the history of the status changes for a specific task id, or for a specific device id in that task.
        /// </summary>
        /// <exception cref="CLOUD.Artik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tid">Task ID.</param>
        /// <param name="did">Device ID. Optional. (optional)</param>
        /// <returns>Task of ApiResponse (TaskStatusesHistoryEnvelope)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TaskStatusesHistoryEnvelope>> GetStatusesHistoryAsyncWithHttpInfo (string tid, string did = null)
        {
            // verify the required parameter 'tid' is set
            if (tid == null)
                throw new ApiException(400, "Missing required parameter 'tid' when calling DevicesManagementApi->GetStatusesHistory");

            var localVarPath = "/devicemgmt/tasks/{tid}/statuses/history";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (tid != null) localVarPathParams.Add("tid", Configuration.ApiClient.ParameterToString(tid)); // path parameter
            if (did != null) localVarQueryParams.Add("did", Configuration.ApiClient.ParameterToString(did)); // query parameter

            // authentication (artikcloud_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetStatusesHistory", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaskStatusesHistoryEnvelope>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TaskStatusesHistoryEnvelope) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaskStatusesHistoryEnvelope)));
            
        }

        /// <summary>
        /// Returns the details and global status of a specific task id. Returns the details and global status of a specific task id.
        /// </summary>
        /// <exception cref="CLOUD.Artik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tid">Task ID.</param>
        /// <returns>TaskEnvelope</returns>
        public TaskEnvelope GetTaskByID (string tid)
        {
             ApiResponse<TaskEnvelope> localVarResponse = GetTaskByIDWithHttpInfo(tid);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the details and global status of a specific task id. Returns the details and global status of a specific task id.
        /// </summary>
        /// <exception cref="CLOUD.Artik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tid">Task ID.</param>
        /// <returns>ApiResponse of TaskEnvelope</returns>
        public ApiResponse< TaskEnvelope > GetTaskByIDWithHttpInfo (string tid)
        {
            // verify the required parameter 'tid' is set
            if (tid == null)
                throw new ApiException(400, "Missing required parameter 'tid' when calling DevicesManagementApi->GetTaskByID");

            var localVarPath = "/devicemgmt/tasks/{tid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (tid != null) localVarPathParams.Add("tid", Configuration.ApiClient.ParameterToString(tid)); // path parameter

            // authentication (artikcloud_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTaskByID", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaskEnvelope>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TaskEnvelope) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaskEnvelope)));
            
        }

        /// <summary>
        /// Returns the details and global status of a specific task id. Returns the details and global status of a specific task id.
        /// </summary>
        /// <exception cref="CLOUD.Artik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tid">Task ID.</param>
        /// <returns>Task of TaskEnvelope</returns>
        public async System.Threading.Tasks.Task<TaskEnvelope> GetTaskByIDAsync (string tid)
        {
             ApiResponse<TaskEnvelope> localVarResponse = await GetTaskByIDAsyncWithHttpInfo(tid);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the details and global status of a specific task id. Returns the details and global status of a specific task id.
        /// </summary>
        /// <exception cref="CLOUD.Artik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tid">Task ID.</param>
        /// <returns>Task of ApiResponse (TaskEnvelope)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TaskEnvelope>> GetTaskByIDAsyncWithHttpInfo (string tid)
        {
            // verify the required parameter 'tid' is set
            if (tid == null)
                throw new ApiException(400, "Missing required parameter 'tid' when calling DevicesManagementApi->GetTaskByID");

            var localVarPath = "/devicemgmt/tasks/{tid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (tid != null) localVarPathParams.Add("tid", Configuration.ApiClient.ParameterToString(tid)); // path parameter

            // authentication (artikcloud_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTaskByID", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaskEnvelope>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TaskEnvelope) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaskEnvelope)));
            
        }

        /// <summary>
        /// Returns the all the tasks for a device type. Returns the all the tasks for a device type.
        /// </summary>
        /// <exception cref="CLOUD.Artik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dtid">Device Type ID.</param>
        /// <param name="count">Max results count. (optional)</param>
        /// <param name="offset">Result starting offset. (optional)</param>
        /// <param name="status">Status filter. Comma-separated statuses. (optional)</param>
        /// <param name="order">Sort results by a field. Valid fields: createdOn. (optional)</param>
        /// <param name="sort">Sort order. Valid values: asc or desc. (optional)</param>
        /// <returns>TaskListEnvelope</returns>
        public TaskListEnvelope GetTasks (string dtid, int? count = null, int? offset = null, string status = null, string order = null, string sort = null)
        {
             ApiResponse<TaskListEnvelope> localVarResponse = GetTasksWithHttpInfo(dtid, count, offset, status, order, sort);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Returns the all the tasks for a device type. Returns the all the tasks for a device type.
        /// </summary>
        /// <exception cref="CLOUD.Artik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dtid">Device Type ID.</param>
        /// <param name="count">Max results count. (optional)</param>
        /// <param name="offset">Result starting offset. (optional)</param>
        /// <param name="status">Status filter. Comma-separated statuses. (optional)</param>
        /// <param name="order">Sort results by a field. Valid fields: createdOn. (optional)</param>
        /// <param name="sort">Sort order. Valid values: asc or desc. (optional)</param>
        /// <returns>ApiResponse of TaskListEnvelope</returns>
        public ApiResponse< TaskListEnvelope > GetTasksWithHttpInfo (string dtid, int? count = null, int? offset = null, string status = null, string order = null, string sort = null)
        {
            // verify the required parameter 'dtid' is set
            if (dtid == null)
                throw new ApiException(400, "Missing required parameter 'dtid' when calling DevicesManagementApi->GetTasks");

            var localVarPath = "/devicemgmt/tasks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (dtid != null) localVarQueryParams.Add("dtid", Configuration.ApiClient.ParameterToString(dtid)); // query parameter
            if (count != null) localVarQueryParams.Add("count", Configuration.ApiClient.ParameterToString(count)); // query parameter
            if (offset != null) localVarQueryParams.Add("offset", Configuration.ApiClient.ParameterToString(offset)); // query parameter
            if (status != null) localVarQueryParams.Add("status", Configuration.ApiClient.ParameterToString(status)); // query parameter
            if (order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // query parameter
            if (sort != null) localVarQueryParams.Add("sort", Configuration.ApiClient.ParameterToString(sort)); // query parameter

            // authentication (artikcloud_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTasks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaskListEnvelope>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TaskListEnvelope) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaskListEnvelope)));
            
        }

        /// <summary>
        /// Returns the all the tasks for a device type. Returns the all the tasks for a device type.
        /// </summary>
        /// <exception cref="CLOUD.Artik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dtid">Device Type ID.</param>
        /// <param name="count">Max results count. (optional)</param>
        /// <param name="offset">Result starting offset. (optional)</param>
        /// <param name="status">Status filter. Comma-separated statuses. (optional)</param>
        /// <param name="order">Sort results by a field. Valid fields: createdOn. (optional)</param>
        /// <param name="sort">Sort order. Valid values: asc or desc. (optional)</param>
        /// <returns>Task of TaskListEnvelope</returns>
        public async System.Threading.Tasks.Task<TaskListEnvelope> GetTasksAsync (string dtid, int? count = null, int? offset = null, string status = null, string order = null, string sort = null)
        {
             ApiResponse<TaskListEnvelope> localVarResponse = await GetTasksAsyncWithHttpInfo(dtid, count, offset, status, order, sort);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Returns the all the tasks for a device type. Returns the all the tasks for a device type.
        /// </summary>
        /// <exception cref="CLOUD.Artik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dtid">Device Type ID.</param>
        /// <param name="count">Max results count. (optional)</param>
        /// <param name="offset">Result starting offset. (optional)</param>
        /// <param name="status">Status filter. Comma-separated statuses. (optional)</param>
        /// <param name="order">Sort results by a field. Valid fields: createdOn. (optional)</param>
        /// <param name="sort">Sort order. Valid values: asc or desc. (optional)</param>
        /// <returns>Task of ApiResponse (TaskListEnvelope)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TaskListEnvelope>> GetTasksAsyncWithHttpInfo (string dtid, int? count = null, int? offset = null, string status = null, string order = null, string sort = null)
        {
            // verify the required parameter 'dtid' is set
            if (dtid == null)
                throw new ApiException(400, "Missing required parameter 'dtid' when calling DevicesManagementApi->GetTasks");

            var localVarPath = "/devicemgmt/tasks";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (dtid != null) localVarQueryParams.Add("dtid", Configuration.ApiClient.ParameterToString(dtid)); // query parameter
            if (count != null) localVarQueryParams.Add("count", Configuration.ApiClient.ParameterToString(count)); // query parameter
            if (offset != null) localVarQueryParams.Add("offset", Configuration.ApiClient.ParameterToString(offset)); // query parameter
            if (status != null) localVarQueryParams.Add("status", Configuration.ApiClient.ParameterToString(status)); // query parameter
            if (order != null) localVarQueryParams.Add("order", Configuration.ApiClient.ParameterToString(order)); // query parameter
            if (sort != null) localVarQueryParams.Add("sort", Configuration.ApiClient.ParameterToString(sort)); // query parameter

            // authentication (artikcloud_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetTasks", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaskListEnvelope>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TaskListEnvelope) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaskListEnvelope)));
            
        }

        /// <summary>
        /// Query device properties across devices. Query device properties across devices.
        /// </summary>
        /// <exception cref="CLOUD.Artik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dtid">Device Type ID.</param>
        /// <param name="count">Max results count. (optional)</param>
        /// <param name="offset">Result starting offset. (optional)</param>
        /// <param name="filter">Query filter. Comma-separated key&#x3D;value pairs (optional)</param>
        /// <param name="includeTimestamp">Include timestamp. (optional)</param>
        /// <returns>MetadataQueryEnvelope</returns>
        public MetadataQueryEnvelope QueryProperties (string dtid, int? count = null, int? offset = null, string filter = null, bool? includeTimestamp = null)
        {
             ApiResponse<MetadataQueryEnvelope> localVarResponse = QueryPropertiesWithHttpInfo(dtid, count, offset, filter, includeTimestamp);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Query device properties across devices. Query device properties across devices.
        /// </summary>
        /// <exception cref="CLOUD.Artik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dtid">Device Type ID.</param>
        /// <param name="count">Max results count. (optional)</param>
        /// <param name="offset">Result starting offset. (optional)</param>
        /// <param name="filter">Query filter. Comma-separated key&#x3D;value pairs (optional)</param>
        /// <param name="includeTimestamp">Include timestamp. (optional)</param>
        /// <returns>ApiResponse of MetadataQueryEnvelope</returns>
        public ApiResponse< MetadataQueryEnvelope > QueryPropertiesWithHttpInfo (string dtid, int? count = null, int? offset = null, string filter = null, bool? includeTimestamp = null)
        {
            // verify the required parameter 'dtid' is set
            if (dtid == null)
                throw new ApiException(400, "Missing required parameter 'dtid' when calling DevicesManagementApi->QueryProperties");

            var localVarPath = "/devicemgmt/devices/properties";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (dtid != null) localVarQueryParams.Add("dtid", Configuration.ApiClient.ParameterToString(dtid)); // query parameter
            if (count != null) localVarQueryParams.Add("count", Configuration.ApiClient.ParameterToString(count)); // query parameter
            if (offset != null) localVarQueryParams.Add("offset", Configuration.ApiClient.ParameterToString(offset)); // query parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter
            if (includeTimestamp != null) localVarQueryParams.Add("includeTimestamp", Configuration.ApiClient.ParameterToString(includeTimestamp)); // query parameter

            // authentication (artikcloud_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QueryProperties", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MetadataQueryEnvelope>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MetadataQueryEnvelope) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MetadataQueryEnvelope)));
            
        }

        /// <summary>
        /// Query device properties across devices. Query device properties across devices.
        /// </summary>
        /// <exception cref="CLOUD.Artik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dtid">Device Type ID.</param>
        /// <param name="count">Max results count. (optional)</param>
        /// <param name="offset">Result starting offset. (optional)</param>
        /// <param name="filter">Query filter. Comma-separated key&#x3D;value pairs (optional)</param>
        /// <param name="includeTimestamp">Include timestamp. (optional)</param>
        /// <returns>Task of MetadataQueryEnvelope</returns>
        public async System.Threading.Tasks.Task<MetadataQueryEnvelope> QueryPropertiesAsync (string dtid, int? count = null, int? offset = null, string filter = null, bool? includeTimestamp = null)
        {
             ApiResponse<MetadataQueryEnvelope> localVarResponse = await QueryPropertiesAsyncWithHttpInfo(dtid, count, offset, filter, includeTimestamp);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Query device properties across devices. Query device properties across devices.
        /// </summary>
        /// <exception cref="CLOUD.Artik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dtid">Device Type ID.</param>
        /// <param name="count">Max results count. (optional)</param>
        /// <param name="offset">Result starting offset. (optional)</param>
        /// <param name="filter">Query filter. Comma-separated key&#x3D;value pairs (optional)</param>
        /// <param name="includeTimestamp">Include timestamp. (optional)</param>
        /// <returns>Task of ApiResponse (MetadataQueryEnvelope)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MetadataQueryEnvelope>> QueryPropertiesAsyncWithHttpInfo (string dtid, int? count = null, int? offset = null, string filter = null, bool? includeTimestamp = null)
        {
            // verify the required parameter 'dtid' is set
            if (dtid == null)
                throw new ApiException(400, "Missing required parameter 'dtid' when calling DevicesManagementApi->QueryProperties");

            var localVarPath = "/devicemgmt/devices/properties";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (dtid != null) localVarQueryParams.Add("dtid", Configuration.ApiClient.ParameterToString(dtid)); // query parameter
            if (count != null) localVarQueryParams.Add("count", Configuration.ApiClient.ParameterToString(count)); // query parameter
            if (offset != null) localVarQueryParams.Add("offset", Configuration.ApiClient.ParameterToString(offset)); // query parameter
            if (filter != null) localVarQueryParams.Add("filter", Configuration.ApiClient.ParameterToString(filter)); // query parameter
            if (includeTimestamp != null) localVarQueryParams.Add("includeTimestamp", Configuration.ApiClient.ParameterToString(includeTimestamp)); // query parameter

            // authentication (artikcloud_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("QueryProperties", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MetadataQueryEnvelope>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MetadataQueryEnvelope) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MetadataQueryEnvelope)));
            
        }

        /// <summary>
        /// Updates a device type information Updates a device type information
        /// </summary>
        /// <exception cref="CLOUD.Artik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dtid">Device type ID.</param>
        /// <param name="deviceTypeInfo">Device type info object to be set</param>
        /// <returns>DeviceTypesInfoEnvelope</returns>
        public DeviceTypesInfoEnvelope UpdateDeviceTypesInfo (string dtid, DeviceTypesInfo deviceTypeInfo)
        {
             ApiResponse<DeviceTypesInfoEnvelope> localVarResponse = UpdateDeviceTypesInfoWithHttpInfo(dtid, deviceTypeInfo);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a device type information Updates a device type information
        /// </summary>
        /// <exception cref="CLOUD.Artik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dtid">Device type ID.</param>
        /// <param name="deviceTypeInfo">Device type info object to be set</param>
        /// <returns>ApiResponse of DeviceTypesInfoEnvelope</returns>
        public ApiResponse< DeviceTypesInfoEnvelope > UpdateDeviceTypesInfoWithHttpInfo (string dtid, DeviceTypesInfo deviceTypeInfo)
        {
            // verify the required parameter 'dtid' is set
            if (dtid == null)
                throw new ApiException(400, "Missing required parameter 'dtid' when calling DevicesManagementApi->UpdateDeviceTypesInfo");
            // verify the required parameter 'deviceTypeInfo' is set
            if (deviceTypeInfo == null)
                throw new ApiException(400, "Missing required parameter 'deviceTypeInfo' when calling DevicesManagementApi->UpdateDeviceTypesInfo");

            var localVarPath = "/devicemgmt/devicetypes/{dtid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (dtid != null) localVarPathParams.Add("dtid", Configuration.ApiClient.ParameterToString(dtid)); // path parameter
            if (deviceTypeInfo != null && deviceTypeInfo.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(deviceTypeInfo); // http body (model) parameter
            }
            else
            {
                localVarPostBody = deviceTypeInfo; // byte array
            }

            // authentication (artikcloud_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateDeviceTypesInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeviceTypesInfoEnvelope>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeviceTypesInfoEnvelope) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeviceTypesInfoEnvelope)));
            
        }

        /// <summary>
        /// Updates a device type information Updates a device type information
        /// </summary>
        /// <exception cref="CLOUD.Artik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dtid">Device type ID.</param>
        /// <param name="deviceTypeInfo">Device type info object to be set</param>
        /// <returns>Task of DeviceTypesInfoEnvelope</returns>
        public async System.Threading.Tasks.Task<DeviceTypesInfoEnvelope> UpdateDeviceTypesInfoAsync (string dtid, DeviceTypesInfo deviceTypeInfo)
        {
             ApiResponse<DeviceTypesInfoEnvelope> localVarResponse = await UpdateDeviceTypesInfoAsyncWithHttpInfo(dtid, deviceTypeInfo);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates a device type information Updates a device type information
        /// </summary>
        /// <exception cref="CLOUD.Artik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="dtid">Device type ID.</param>
        /// <param name="deviceTypeInfo">Device type info object to be set</param>
        /// <returns>Task of ApiResponse (DeviceTypesInfoEnvelope)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeviceTypesInfoEnvelope>> UpdateDeviceTypesInfoAsyncWithHttpInfo (string dtid, DeviceTypesInfo deviceTypeInfo)
        {
            // verify the required parameter 'dtid' is set
            if (dtid == null)
                throw new ApiException(400, "Missing required parameter 'dtid' when calling DevicesManagementApi->UpdateDeviceTypesInfo");
            // verify the required parameter 'deviceTypeInfo' is set
            if (deviceTypeInfo == null)
                throw new ApiException(400, "Missing required parameter 'deviceTypeInfo' when calling DevicesManagementApi->UpdateDeviceTypesInfo");

            var localVarPath = "/devicemgmt/devicetypes/{dtid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (dtid != null) localVarPathParams.Add("dtid", Configuration.ApiClient.ParameterToString(dtid)); // path parameter
            if (deviceTypeInfo != null && deviceTypeInfo.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(deviceTypeInfo); // http body (model) parameter
            }
            else
            {
                localVarPostBody = deviceTypeInfo; // byte array
            }

            // authentication (artikcloud_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateDeviceTypesInfo", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeviceTypesInfoEnvelope>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeviceTypesInfoEnvelope) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeviceTypesInfoEnvelope)));
            
        }

        /// <summary>
        /// Updates a device&#39;s server properties. Updates a device&#39;s server properties.
        /// </summary>
        /// <exception cref="CLOUD.Artik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did">Device ID.</param>
        /// <param name="deviceProperties">Device properties object to be set</param>
        /// <returns>MetadataEnvelope</returns>
        public MetadataEnvelope UpdateServerProperties (string did, Object deviceProperties)
        {
             ApiResponse<MetadataEnvelope> localVarResponse = UpdateServerPropertiesWithHttpInfo(did, deviceProperties);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a device&#39;s server properties. Updates a device&#39;s server properties.
        /// </summary>
        /// <exception cref="CLOUD.Artik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did">Device ID.</param>
        /// <param name="deviceProperties">Device properties object to be set</param>
        /// <returns>ApiResponse of MetadataEnvelope</returns>
        public ApiResponse< MetadataEnvelope > UpdateServerPropertiesWithHttpInfo (string did, Object deviceProperties)
        {
            // verify the required parameter 'did' is set
            if (did == null)
                throw new ApiException(400, "Missing required parameter 'did' when calling DevicesManagementApi->UpdateServerProperties");
            // verify the required parameter 'deviceProperties' is set
            if (deviceProperties == null)
                throw new ApiException(400, "Missing required parameter 'deviceProperties' when calling DevicesManagementApi->UpdateServerProperties");

            var localVarPath = "/devicemgmt/devices/{did}/serverproperties";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (did != null) localVarPathParams.Add("did", Configuration.ApiClient.ParameterToString(did)); // path parameter
            if (deviceProperties != null && deviceProperties.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(deviceProperties); // http body (model) parameter
            }
            else
            {
                localVarPostBody = deviceProperties; // byte array
            }

            // authentication (artikcloud_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateServerProperties", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MetadataEnvelope>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MetadataEnvelope) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MetadataEnvelope)));
            
        }

        /// <summary>
        /// Updates a device&#39;s server properties. Updates a device&#39;s server properties.
        /// </summary>
        /// <exception cref="CLOUD.Artik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did">Device ID.</param>
        /// <param name="deviceProperties">Device properties object to be set</param>
        /// <returns>Task of MetadataEnvelope</returns>
        public async System.Threading.Tasks.Task<MetadataEnvelope> UpdateServerPropertiesAsync (string did, Object deviceProperties)
        {
             ApiResponse<MetadataEnvelope> localVarResponse = await UpdateServerPropertiesAsyncWithHttpInfo(did, deviceProperties);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates a device&#39;s server properties. Updates a device&#39;s server properties.
        /// </summary>
        /// <exception cref="CLOUD.Artik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="did">Device ID.</param>
        /// <param name="deviceProperties">Device properties object to be set</param>
        /// <returns>Task of ApiResponse (MetadataEnvelope)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<MetadataEnvelope>> UpdateServerPropertiesAsyncWithHttpInfo (string did, Object deviceProperties)
        {
            // verify the required parameter 'did' is set
            if (did == null)
                throw new ApiException(400, "Missing required parameter 'did' when calling DevicesManagementApi->UpdateServerProperties");
            // verify the required parameter 'deviceProperties' is set
            if (deviceProperties == null)
                throw new ApiException(400, "Missing required parameter 'deviceProperties' when calling DevicesManagementApi->UpdateServerProperties");

            var localVarPath = "/devicemgmt/devices/{did}/serverproperties";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (did != null) localVarPathParams.Add("did", Configuration.ApiClient.ParameterToString(did)); // path parameter
            if (deviceProperties != null && deviceProperties.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(deviceProperties); // http body (model) parameter
            }
            else
            {
                localVarPostBody = deviceProperties; // byte array
            }

            // authentication (artikcloud_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateServerProperties", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<MetadataEnvelope>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (MetadataEnvelope) Configuration.ApiClient.Deserialize(localVarResponse, typeof(MetadataEnvelope)));
            
        }

        /// <summary>
        /// Updates a task for all devices - For now just allows changing the state to cancelled. Updates a task for all devices - For now just allows changing the state to cancelled.
        /// </summary>
        /// <exception cref="CLOUD.Artik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tid">Task ID.</param>
        /// <param name="taskUpdateRequest">Task update request</param>
        /// <returns>TaskUpdateResponse</returns>
        public TaskUpdateResponse UpdateTask (string tid, TaskUpdateRequest taskUpdateRequest)
        {
             ApiResponse<TaskUpdateResponse> localVarResponse = UpdateTaskWithHttpInfo(tid, taskUpdateRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a task for all devices - For now just allows changing the state to cancelled. Updates a task for all devices - For now just allows changing the state to cancelled.
        /// </summary>
        /// <exception cref="CLOUD.Artik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tid">Task ID.</param>
        /// <param name="taskUpdateRequest">Task update request</param>
        /// <returns>ApiResponse of TaskUpdateResponse</returns>
        public ApiResponse< TaskUpdateResponse > UpdateTaskWithHttpInfo (string tid, TaskUpdateRequest taskUpdateRequest)
        {
            // verify the required parameter 'tid' is set
            if (tid == null)
                throw new ApiException(400, "Missing required parameter 'tid' when calling DevicesManagementApi->UpdateTask");
            // verify the required parameter 'taskUpdateRequest' is set
            if (taskUpdateRequest == null)
                throw new ApiException(400, "Missing required parameter 'taskUpdateRequest' when calling DevicesManagementApi->UpdateTask");

            var localVarPath = "/devicemgmt/tasks/{tid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (tid != null) localVarPathParams.Add("tid", Configuration.ApiClient.ParameterToString(tid)); // path parameter
            if (taskUpdateRequest != null && taskUpdateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(taskUpdateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = taskUpdateRequest; // byte array
            }

            // authentication (artikcloud_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaskUpdateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TaskUpdateResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaskUpdateResponse)));
            
        }

        /// <summary>
        /// Updates a task for all devices - For now just allows changing the state to cancelled. Updates a task for all devices - For now just allows changing the state to cancelled.
        /// </summary>
        /// <exception cref="CLOUD.Artik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tid">Task ID.</param>
        /// <param name="taskUpdateRequest">Task update request</param>
        /// <returns>Task of TaskUpdateResponse</returns>
        public async System.Threading.Tasks.Task<TaskUpdateResponse> UpdateTaskAsync (string tid, TaskUpdateRequest taskUpdateRequest)
        {
             ApiResponse<TaskUpdateResponse> localVarResponse = await UpdateTaskAsyncWithHttpInfo(tid, taskUpdateRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates a task for all devices - For now just allows changing the state to cancelled. Updates a task for all devices - For now just allows changing the state to cancelled.
        /// </summary>
        /// <exception cref="CLOUD.Artik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tid">Task ID.</param>
        /// <param name="taskUpdateRequest">Task update request</param>
        /// <returns>Task of ApiResponse (TaskUpdateResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<TaskUpdateResponse>> UpdateTaskAsyncWithHttpInfo (string tid, TaskUpdateRequest taskUpdateRequest)
        {
            // verify the required parameter 'tid' is set
            if (tid == null)
                throw new ApiException(400, "Missing required parameter 'tid' when calling DevicesManagementApi->UpdateTask");
            // verify the required parameter 'taskUpdateRequest' is set
            if (taskUpdateRequest == null)
                throw new ApiException(400, "Missing required parameter 'taskUpdateRequest' when calling DevicesManagementApi->UpdateTask");

            var localVarPath = "/devicemgmt/tasks/{tid}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (tid != null) localVarPathParams.Add("tid", Configuration.ApiClient.ParameterToString(tid)); // path parameter
            if (taskUpdateRequest != null && taskUpdateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(taskUpdateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = taskUpdateRequest; // byte array
            }

            // authentication (artikcloud_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTask", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<TaskUpdateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (TaskUpdateResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(TaskUpdateResponse)));
            
        }

        /// <summary>
        /// Updates a task for a specific device - For now just allows changing the state to cancelled. Updates a task for a specific device - For now just allows changing the state to cancelled.
        /// </summary>
        /// <exception cref="CLOUD.Artik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tid">Task ID.</param>
        /// <param name="did">Device ID.</param>
        /// <param name="deviceTaskUpdateRequest">Device task update request</param>
        /// <returns>DeviceTaskUpdateResponse</returns>
        public DeviceTaskUpdateResponse UpdateTaskForDevice (string tid, string did, DeviceTaskUpdateRequest deviceTaskUpdateRequest)
        {
             ApiResponse<DeviceTaskUpdateResponse> localVarResponse = UpdateTaskForDeviceWithHttpInfo(tid, did, deviceTaskUpdateRequest);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Updates a task for a specific device - For now just allows changing the state to cancelled. Updates a task for a specific device - For now just allows changing the state to cancelled.
        /// </summary>
        /// <exception cref="CLOUD.Artik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tid">Task ID.</param>
        /// <param name="did">Device ID.</param>
        /// <param name="deviceTaskUpdateRequest">Device task update request</param>
        /// <returns>ApiResponse of DeviceTaskUpdateResponse</returns>
        public ApiResponse< DeviceTaskUpdateResponse > UpdateTaskForDeviceWithHttpInfo (string tid, string did, DeviceTaskUpdateRequest deviceTaskUpdateRequest)
        {
            // verify the required parameter 'tid' is set
            if (tid == null)
                throw new ApiException(400, "Missing required parameter 'tid' when calling DevicesManagementApi->UpdateTaskForDevice");
            // verify the required parameter 'did' is set
            if (did == null)
                throw new ApiException(400, "Missing required parameter 'did' when calling DevicesManagementApi->UpdateTaskForDevice");
            // verify the required parameter 'deviceTaskUpdateRequest' is set
            if (deviceTaskUpdateRequest == null)
                throw new ApiException(400, "Missing required parameter 'deviceTaskUpdateRequest' when calling DevicesManagementApi->UpdateTaskForDevice");

            var localVarPath = "/devicemgmt/tasks/{tid}/devices/{did}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (tid != null) localVarPathParams.Add("tid", Configuration.ApiClient.ParameterToString(tid)); // path parameter
            if (did != null) localVarPathParams.Add("did", Configuration.ApiClient.ParameterToString(did)); // path parameter
            if (deviceTaskUpdateRequest != null && deviceTaskUpdateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(deviceTaskUpdateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = deviceTaskUpdateRequest; // byte array
            }

            // authentication (artikcloud_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTaskForDevice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeviceTaskUpdateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeviceTaskUpdateResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeviceTaskUpdateResponse)));
            
        }

        /// <summary>
        /// Updates a task for a specific device - For now just allows changing the state to cancelled. Updates a task for a specific device - For now just allows changing the state to cancelled.
        /// </summary>
        /// <exception cref="CLOUD.Artik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tid">Task ID.</param>
        /// <param name="did">Device ID.</param>
        /// <param name="deviceTaskUpdateRequest">Device task update request</param>
        /// <returns>Task of DeviceTaskUpdateResponse</returns>
        public async System.Threading.Tasks.Task<DeviceTaskUpdateResponse> UpdateTaskForDeviceAsync (string tid, string did, DeviceTaskUpdateRequest deviceTaskUpdateRequest)
        {
             ApiResponse<DeviceTaskUpdateResponse> localVarResponse = await UpdateTaskForDeviceAsyncWithHttpInfo(tid, did, deviceTaskUpdateRequest);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Updates a task for a specific device - For now just allows changing the state to cancelled. Updates a task for a specific device - For now just allows changing the state to cancelled.
        /// </summary>
        /// <exception cref="CLOUD.Artik.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="tid">Task ID.</param>
        /// <param name="did">Device ID.</param>
        /// <param name="deviceTaskUpdateRequest">Device task update request</param>
        /// <returns>Task of ApiResponse (DeviceTaskUpdateResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<DeviceTaskUpdateResponse>> UpdateTaskForDeviceAsyncWithHttpInfo (string tid, string did, DeviceTaskUpdateRequest deviceTaskUpdateRequest)
        {
            // verify the required parameter 'tid' is set
            if (tid == null)
                throw new ApiException(400, "Missing required parameter 'tid' when calling DevicesManagementApi->UpdateTaskForDevice");
            // verify the required parameter 'did' is set
            if (did == null)
                throw new ApiException(400, "Missing required parameter 'did' when calling DevicesManagementApi->UpdateTaskForDevice");
            // verify the required parameter 'deviceTaskUpdateRequest' is set
            if (deviceTaskUpdateRequest == null)
                throw new ApiException(400, "Missing required parameter 'deviceTaskUpdateRequest' when calling DevicesManagementApi->UpdateTaskForDevice");

            var localVarPath = "/devicemgmt/tasks/{tid}/devices/{did}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "application/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (tid != null) localVarPathParams.Add("tid", Configuration.ApiClient.ParameterToString(tid)); // path parameter
            if (did != null) localVarPathParams.Add("did", Configuration.ApiClient.ParameterToString(did)); // path parameter
            if (deviceTaskUpdateRequest != null && deviceTaskUpdateRequest.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(deviceTaskUpdateRequest); // http body (model) parameter
            }
            else
            {
                localVarPostBody = deviceTaskUpdateRequest; // byte array
            }

            // authentication (artikcloud_oauth) required
            // oauth required
            if (!String.IsNullOrEmpty(Configuration.AccessToken))
            {
                localVarHeaderParams["Authorization"] = "Bearer " + Configuration.AccessToken;
            }

            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.PUT, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("UpdateTaskForDevice", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<DeviceTaskUpdateResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (DeviceTaskUpdateResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(DeviceTaskUpdateResponse)));
            
        }

    }
}
