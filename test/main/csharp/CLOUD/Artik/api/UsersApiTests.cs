using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using CLOUD.Artik.Client;
using CLOUD.Artik.Api;
using CLOUD.Artik.Model;

namespace CLOUD.Artik.Test
{
    /// <summary>
    ///  Class for testing UsersApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class UsersApiTests
    {
        private UsersApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
          // set timeout to 10 seconds
          Configuration c1 = new Configuration (timeout: 10000, accessToken: "12d094c0b6294f7f9bdbfcf0d2f6c64b");
          instance = new UsersApi(c1);
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
    		/// Test GetSelf
    		/// </summary>
    		[Test ()]
    		public void TestGetSelf ()
    		{
          UserEnvelope response = instance.GetSelf ();

          Assert.AreEqual ("maneesh", response.Data.Name);
          Assert.AreEqual ("Maneesh Sahu", response.Data.FullName);
    		}

        /// <summary>
        /// Test GetUserDevices
        /// </summary>
        [Test ()]
        public void TestGetUserDevices ()
        {
          DevicesEnvelope response = instance.GetUserDevices (userId: "04ddbd35d57d4d7b8f07f219c44457b2");

          Assert.IsTrue (response.Count > 5);
        }

        /// <summary>
        /// Test UserProperties
        /// </summary>
        [Test ()]
        public void TestUserProperties ()
        {
          String aid = "b6951bf387b84f63b38911ae35d65e28";
          PropertiesEnvelope response = null;
          try
          {
            // Retrieve
            response = instance.GetUserProperties (userId: "04ddbd35d57d4d7b8f07f219c44457b2", aid: aid);
          }
          catch
          {
            // Create
            AppProperties appProperties = new AppProperties (Properties: "abc=def");
            response = instance.CreateUserProperties (userId: "04ddbd35d57d4d7b8f07f219c44457b2", properties: appProperties, aid: aid);
          }

          Assert.IsNotNull (response);

          // Update
          AppProperties appProperties2 = new AppProperties( Properties: "mno=pqr");
          PropertiesEnvelope response2 = instance.UpdateUserProperties (userId: "04ddbd35d57d4d7b8f07f219c44457b2", properties: appProperties2, aid: aid);

          Assert.IsNotNull (response2);
          Assert.AreEqual ("mno=pqr", response2.Data.Properties);

          // Delete
          PropertiesEnvelope response3 = instance.DeleteUserProperties (userId: "04ddbd35d57d4d7b8f07f219c44457b2", aid: aid);

          Assert.IsNotNull (response3);
          Assert.AreEqual(response2, response3);
        }
    }
}
